{"title":"Visualização de Dados Geográficos","markdown":{"headingText":"Visualização de Dados Geográficos","containsRefs":false,"markdown":" \n::: {.callout-tip}\n## Conteúdos\n\nVisualização de dados resultantes de modelos de *machine learning* e de dados geográficos. \n:::\n\n\n## Dados Geográficos\n\nSistema de Informação Geográfica (SIG) é um sistema que permite manipular, armazenar, e fazer a análise espacial de dados geográficos.\n\n### Tipo de dados\n\npontos - Point(2,10)\nlinha - LineString([(1,2),(1,5),...])\npolígonos - Polygon([(13,1),(14,4),...]) \n\n![](images/dados_geo.png)\nPreparação do ambiente python:\n\natravés do `prompt ANACONDA`, instalar os packages: \n`GEOPANDAS`\n`FOLIUM`\n`NBB`\n \n ### Coordenadas Geográficas\n \n Latitude e Longitude\n \n Conhecer a Projeção Geográfica é importante para combinar dados de diferentes fontes de informação.\n \n Coordinate Reference System (CRS): define como as coordenadas são representadas no plano.\n \n EPSG Geodetic Parameter Dataset: registo global dos diferentes CRS.\n \n EPSG: European Petroleum Survey Group para identificar os diferentes sistemas de coordenadas.\n\nWGS84 - World Geodetic System 1984 associado ao sistema de posicionamento global (GPS).\n\n+ EPSG 4326\n+ coordenadaas em graus decimais\n\nPseudo-Mercator/WGS84\n\n+ EPSG 3857\n+ coordenadas em metros\n\n#### Exercicio\n\nMostrar Influencia do tipo de Projeção Geográfica  \n```{python}\n# Este Script Permite Visualizar diferentes Projeções\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Definir Figura do MATPLOTLIB\n# Conseguem mostrar mais SUBPLOTS alterando argumeto 2 (1,2)\nfig, ax = plt.subplots(1, 2, figsize=(15, 5))\n\n# Carregar a geogrfia do mundo a partir d eum shapefile dentro um ficheiro ZIP\n# Atenção Mudar o caminho!\nworld = gpd.read_file(r\"data\\ne_110m_admin_0_countries.zip\")\n\n# # Alternativa - Ler os Dados de um Link GEOJSON:\n# url = \"http://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_land.geojson\"\n# # Ler Ficheiro GEOJSON do URL\n# world = gpd.read_file(url)\n\n# Sistema de coordenadas definidos na listagem em baixo:\n# \n# WGS 84 (Lat/Lon): ['EPSG:4326','WGS 84 (Lat/Lon)']\n# Web Mercator Metros: ['EPSG:3857','Web Mercator']\n# Vander Grinten: ['ESRI:54029','World Robinson']\n# Robinson: ['ESRI:54030','World Robinson - National Geographic']\n# Gall-Peters - ['ESRI:53016','Gall Stereographic']\n# Peirce Quincuncial: ['ESRI:54091','Peirce quincuncial North Pole in a square']\n# winkel-Tripel: ['ESRI:53018','Sphere Winkel I']\n# Goode Homolosine (Molweide) - ['EPSG:7619','Interrupted Goode Homolonsine']\n# Albers Equal Area: ['ESRI:102008','North America Albers Equal Area Conic']\n# Eckert: ['ESRI:53010','Sphere Eckert VI']\n# Portugal Continental: ['EPSG:3763','Portugal Continental: PT-TM06/ETRS89']\n# Açores UTM Fuso 26: ['EPSG:5015','TRF93 / PTRA08 - UTM fuso 26 - Grupo Central e Oriental do Arquipélago dos Açores']\n\n# sistema de Coordenadas para Visualizar - 12 exemplos:\nsistcoord = [['EPSG:4326','WGS 84 (Lat/Lon)'], ['EPSG:3857','Web Mercator'],\n             ['ESRI:54029','World Robinson'], ['ESRI:54030','World Robinson - National Geographic'], \n             ['ESRI:53016','Gall Stereographic'], ['ESRI:54091','Peirce quincuncial North Pole in a square'],\n             ['ESRI:53018','Sphere Winkel I'],['EPSG:7619','Interrupted Goode Homolonsine'],\n             ['ESRI:102008','North America Albers Equal Area Conic'], ['ESRI:53010','Sphere Eckert VI'],\n             ['EPSG:3763','Portugal Continental: PT-TM06/ETRS89'], ['EPSG:5015','TRF93 / PTRA08 - UTM fuso 26 - Grupo Central e Oriental do Arquipélago dos Açores']]\n\n\n# Para mostrar\nmapa1 = 0\nmapa2 = 11\n\n# ------------------------------------------\n# Mudar Projeçoes na indicação da Listagem\n#world.to_crs(epsg=2264).plot(ax=ax[0])\n\nworld.to_crs(sistcoord[mapa1][0]).plot(ax=ax[0])\nax[0].set_title(sistcoord[mapa1][1])\n\n#world.to_crs(epsg=4087).plot(ax=ax[1])\nworld.to_crs(sistcoord[mapa2][0]).plot(ax=ax[1])\nax[1].set_title(sistcoord[mapa2][1])\n\n\nplt.tight_layout()\nplt.show()\n```\n\n### GeoPandas e MatPlotLib\n\nAs mesmas funcionalidades do package `Pandas` podem ser usadas com o `GeoPandas`, usa também outros packages como `Shapely` e `Fiona`\n\n![](images\\pandas_geo.png)\n\n\n### Criar dados GeoPandas\n\n```{python}\n  # Importar GeoPandas\nimport geopandas as gpd\n\n# Carregar Dados com read_file (Shapefile preferivel, GeoJSON -  Mais Lento)\n# Mudar Caminho para onde estão os dados - atenção de ter os ficheiros .shp\\.shx\\.dbf\\.prj\nfile_path = r\"data\\NUTS3_2015_PT.shp\"\n\n# Definir o encoding para evitar problemas de desenho dos nomes\nencoding = 'utf-8'  \n# Ler Shapefile:\ngdf_nuts3 = gpd.read_file(file_path, encoding=encoding)\n\nprint(gdf_nuts3.info())\nprint(gdf_nuts3.head())\ngdf_nuts3.loc[1,'geometry']\n\n#gdf_nuts3.head()\n\n```\nMostrar Objecto Geometry  \n```{python}\n# Informação de um Polygon\n# print(gdf_nuts3.loc[1,'geometry'])\n```\n\nObjecto de Geometria  \n```{python}\n# Tipo Objecto GeoPandas\nprint (type(gdf_nuts3))\n# Tipo de Dados da coluna de Geometria\nprint (type(gdf_nuts3.geometry))\n```\n\nVisualizar GDF  \n```{python}\n# Mostrar Geografia\n#import geopandas as gpd\nimport matplotlib.pyplot as plt\n\ngdf_nuts3.plot(column = 'NUTS3_DSG',\n              legend = False)\nplt.show()\n```\n\nSelecionar registos dum GDF  \n```{python}\n# Selecção utilizando os operadores comuns\n# Selecção pode ser efetuada com ou sem a função LOC\ngdf_nuts3_continente = gdf_nuts3[gdf_nuts3['NUTS3'] < '2']\ngdf_nuts3_sel = gdf_nuts3.loc[gdf_nuts3.NUTS2 == '11']\n\n# Mostrar numero registos selecionados\nprint(\"Nº registos Continente\", len(gdf_nuts3_continente))\nprint(\"Nº registos NUTS2 11\", len(gdf_nuts3_sel))\n\n# Selecionar utilizando comparação de um String\nselected_rows_like = gdf_nuts3[gdf_nuts3['NUTS3'].str.startswith('11')]\nprint('Nº registos que começam com 11',len(selected_rows_like))\n                        \n# Selecionar Linhas quando existem numa Listagem\nlista_selecao = ['11A', '11E','16E','170']\nselected_rows = gdf_nuts3[gdf_nuts3.NUTS3.isin(lista_selecao)] \nprint('Nº registos que estão numa lista - vs 1',len(selected_rows))\nselected_rows = gdf_nuts3.loc[gdf_nuts3.NUTS3.isin(lista_selecao)] \nprint('Nº registos que estão numa lista - vs 2',len(selected_rows))\n\n# Selecao dos Dados a Mostrar\ngdf_nuts3_sel = gdf_nuts3.loc[gdf_nuts3.NUTS2 == '11']\ngdf_nuts3_sel.plot(column = 'NUTS3_DSG',\n              legend = True,\n                  edgecolor = 'black')\n                  \n```\n\n\nVisualização Interactiva com Explore  \n```{python}\n#import geopandas as gpd\n\n# Selecao dos Dados a Mostrar\ngdf_nuts3_sel = gdf_nuts3.loc[gdf_nuts3.NUTS2 == '11']\ngdf_nuts3_sel.explore(column = 'NUTS3_DSG',\n              legend = True,\n                  edgecolor = 'black')\n                  \n```\n\nMostrar geografia  \n```{python}\n# Mostrar Geografia\n\n# Mostrar Áreas NUTS3 Região Centro\ngdf_nuts3_sel = gdf_nuts3.loc[gdf_nuts3.NUTS2 == '16']\n\n# Definir Legenda \n# Definir Localização (loc), Localização em relação ao eixos (bbox_to_anchor), Nº colunas (ncol)\nlgnd_kwds = {'title': 'Nuts3 (Centro)',\n               'loc': 'upper left', \n             'bbox_to_anchor': (1, 1.03), \n             'ncol': 1}\n# Argumetnos: Atributo (column), Colormap (cmap), colocar Legenda (legend), \n#  Legenda definida (legend_kwds), \ngdf_nuts3_sel.plot(column = 'NUTS3_DSG',\n              cmap = 'tab20',\n              legend = True,\n              legend_kwds  = lgnd_kwds,\n              edgecolor = 'dimgray')\n\n# Rotulos  Eixos\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Áreas NUTS3 de Portugal Continental')\n\nplt.show()\n```\n\n##### Exercício\n\n```{python}\n# packages necessários\nimport geopandas as gpd\n\n# Carregar Dados com read_file (Shapefile preferivel, GeoJSON -  Mais Lento)\n# Mudar Caminho para onde estão os dados - atenção de ter os ficheiros .shp\\.shx\\.dbf\\.prj\nfile_path = r\"data\\CAOP20200_MN_PT.shp\"\n\n# Definir o encoding para evitar problemas de desenho dos nomes\nencoding = 'utf-8'  \n# Ler Shapefile:\ngdf_caop = gpd.read_file(file_path, encoding=encoding)\n\nprint(gdf_caop.info())\nprint(gdf_caop.head())\nprint(gdf_caop.DISTRITO.unique()) \n\ngdf_caop.loc[1,'geometry']\n\nprint()\nprint(gdf_caop.NUTS3_02.unique()) # lista com a opções de NUTS3_02\n\n# cria nova coluna para legenda\ngdf_caop['DTMN2'] = gdf_caop['DTMNDSG'] + '(' + gdf_caop['DTMN'].astype(str) + ')'\n\n```\n\nvizualisar com `explore`  \n```{python}\ngdf_caop.explore()\n```\n\n\ncontagens e filtros  \n```{python}\n# conta o número de registos por NUTS3_02\nprint(gdf_caop.NUTS3_24.value_counts())\n\n# selecionar linhas a partir de uma lista\nlista_selecao = ['11A','11E','16E','170']\n\nselect_rows = gdf_caop.loc[gdf_caop.NUTS3_24.isin(lista_selecao)]\n\nprint('Nº de registos que estão na lista ', lista_selecao, len(select_rows))\n```\n\nFazer a Seleção de um DISTRITO e mostrar os munícipios  \n```{python}\nimport matplotlib.pyplot as plt\n\n# Selecao dos Dados a Mostrar\ngdf_caop_sel = gdf_caop.loc[gdf_caop.DISTRITO == 'Guarda'] \n\n# Definir Legenda \n# Definir Localização (loc), Localização em relação ao eixos (bbox_to_anchor), Nº colunas (ncol)\nlgnd_kwds = {'title': 'Municipios',\n              'loc': 'upper left', \n             'bbox_to_anchor': (1, 1.03), \n             'ncol': 1}\n             \ngdf_caop_sel.plot(column = 'DTMN2',\n              legend = True,\n              legend_kwds  = lgnd_kwds,\n              edgecolor = 'black')\n\n# Rotulos  Eixos\nplt.xlabel('X Coordinados')\nplt.ylabel('Y Coordinados')\nplt.title('Municipios do Distrito da Guarda')\n# Rodar xticks; ha é o alinhamento\nplt.xticks(rotation=45, ha='right')\n              \n\n\n# **Codigo Alternativo Utilizando ax objecto**\n# fig, ax = plt.subplots()\n# gdf_caop_sel.plot(ax=ax,\n#               column = 'DTMN2',\n#               cmap = 'tab20',\n#               legend = True,\n#               legend_kwds  = lgnd_kwds,\n#               edgecolor = 'dimgray')\n# \n# # Rotulos  Eixos - Diferentes Funções\n# ax.set_xlabel('X Coordinados')\n# ax.set_ylabel('Y Coordinados')\n \nplt.show()\n```\n\nusando o explore  \n```{python}\n\ngdf_caop_sel.explore(column = 'DISTRITO',\n              legend = True,\n                  edgecolor = 'black')\n```\n\n### Importar dados de tabelas\n\n#### ACES \n\n```{python}\n# Importar dados DGS Utentes em Centros de Saude\n# Ver referencia:  https://dados.gov.pt/pt/datasets/evolucao-mensal-de-utentes-atendidos-nos-centros-de-saude-agregado-por-aces-no-ambito-da-saude-oral-nos-cuidados-de-saude-primarios-socsp/#resources\n# Atributos: Período, ARS, ACES, Localização Geográfica, Sexo, Faixa Etária, Nº Utentes,ID \nimport pandas as pd\n\n# Link DGS (Utentes Centro Saude)  \nficheiro = r'http://dados.gov.pt/pt/datasets/r/dc54ea6f-31f3-483b-a719-718d0d7451f3'\n# Ler ficheiro do computador:\n#ficheiro = r'C:\\TEMp\\utentes-atendidos-nos-centros-de-saude-no-ambito-da-soep.csv'\n\n# Importar em DataFrame\nencoding = 'utf-8'\ndf_utentes = pd.read_csv(ficheiro, sep=';', encoding=encoding)\n\n\n# Mostrar informação df\nprint(df_utentes.head(5))\nprint(df_utentes.info())\nprint(df_utentes.describe())\n```\n\npassar para o GDF  \n```{python}\n# Verificar os Dados\n# Total numero de Pontos Unicos para Ficheiro:\nprint('Num localizações Geográficos:',len(df_utentes['Localização Geográfica'].unique()))\n\n# Verificar valores únicos de outras variáveis\nprint('Num ACES:',len(df_utentes['ACES'].unique()))\nprint('Num ARS:',len(df_utentes['ARS'].unique()))\nprint(df_utentes['Faixa Etária'].unique())\nprint(df_utentes['Sexo'].unique())\n```\n\n```{python}\n# DataFrame com dados Utentes: df_utentes\n\n# Criar Colunas lat e Long a partir da coluna 'Localização Geográfica'\n# no ficheiro original a informação existe em apenas uma coluna\nprint (\"Tipo de atributo\", type(df_utentes['Localização Geográfica']))\n# Fazer um Split dos Valores utilizando virgula como separador\ndf_utentes[['lat', 'long']] = df_utentes['Localização Geográfica'].str.split(',', expand=True)\n\n# Mostrar informação df\nprint(df_utentes.info())\n\n```\n\n```{python}\n# Criar DataFrame com Pontos Unicos e Numero de Utentos\n\n# Total numero de Pontos Unicos para Ficheiro:\nprint('Num loc:',len(df_utentes['Localização Geográfica'].unique()))\n\n# Converter variaveis numericos para numeric\ndf_utentes['Nº Utentes'] = pd.to_numeric(df_utentes['Nº Utentes'], errors='coerce')\ndf_utentes['lat'] = pd.to_numeric(df_utentes['lat'], errors='coerce')\ndf_utentes['long'] = pd.to_numeric(df_utentes['long'], errors='coerce')\n\n# Criar Novo DataFrame com ACES e Soma Nº Utentes\n# Group by 'ARS', 'ACES', 'Localização Geográfica'\n# O nº de utentes é um exemplo de um atributo que podemos utilizar para visualização\ndf_aces = df_utentes.groupby(['ARS', 'ACES', 'Localização Geográfica','lat', 'long']).agg({\n    'Nº Utentes': 'sum'\n}).reset_index()\n\nprint(df_aces.head())\n```\n\n```{python}\n# Mesmo com Pandas DataFrame já é possível mostrar a geografia\n# Importar Bibliotecas\n#import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Mostrar a localização\nplt.scatter(df_aces.long, df_aces.lat)\n \n# Show the plot\nplt.show()\n```\n\n```{python}\n# Criar GeoDataFrame \n#import pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\n# Criar a Coluna de geometry no DF a partir informação atributos long e lat \n# Utiliza-se o Point Object do modulo shapely\n# lambda - função anônima no Python \n# df_aces.apply - applica a função a cada linha do DF\n# Argumento apply: axis = 1. Função deve ocorrer para todos as linhas\ndf_aces['geometry'] = df_aces.apply(lambda x: Point(float(x.long), float(x.lat)), axis=1)\n \n# Create a GeoDataFrame from art and verify the type\ngdf_aces = gpd.GeoDataFrame(df_aces, crs = \"EPSG:4326\", geometry = df_aces.geometry)\n\nprint(type(gdf_aces))\n```\n\nimportar dados poligonos  \n```{python}\n# Shapefile NUTS3: NUTS3_2015_PT.shp (dados estão em WebMercator)\n# Mostrar Geografia\n#import geopandas as gpd\n#import matplotlib.pyplot as plt\n\n# Carregar Dados com read_file (Shapefile preferivel, GeoJSON -  Mais Lento)\n# Mudar Caminho para onde estão os dados - atenção de ter os ficheiros .shp\\.shx\\.dbf\\.prj\nfile_path = r\"data\\NUTS3_2015_PT.shp\"\n\n# Definir o encoding para evitar problemas de desenho dos nomes\nencoding = 'utf-8'  \n# Ler Shapefile:\ngdf_nuts3 = gpd.read_file(file_path, encoding=encoding)\n\nprint(gdf_nuts3.info())\n```\n\nmostrar pontos com Polygons  \n```{python}\n    \n# Existem diferenças entre o CRS!\nprint(\"CRS of the GeoDataFrame:\", gdf_aces.crs)\nprint(\"CRS of the GeoDataFrame:\", gdf_nuts3.crs)\n\n# Diferença nos CRS -> Converter para WebMercator\ngdf_aces_m = gdf_aces.to_crs(\"epsg:3857\")\n\n# Obter apenas Municipios do Continente:\ngdf_nuts3_sel = gdf_nuts3.loc[gdf_nuts3.NUTS1 == '1']\n\n# Mostrar os 2 mapas:\n# Argumento cmap tem a predefinição de cores\n# Lista Referencias ColorMaps: https://matplotlib.org/stable/gallery/color/colormap_reference.html\nax = gdf_nuts3_sel.plot(column='NUTS3', \n                        cmap='Set2', \n                        legend=True, \n                        figsize=(10, 8))\n\n# Imprimir os pontos no mesmo ax (subplot)\n# Lista MatPlotLib cores: https://matplotlib.org/stable/gallery/color/named_colors.html\ngdf_aces_m.plot(ax=ax, \n                color='red',\n                markersize=30, \n                edgecolor='Black', \n                label='Cidades')\n\n# Adicionar Legenda\nax.legend()\nplt.title('Localização das ACES por NUTS3')\n\n# Mostrar o plot\nplt.show()\n\n```\n\nO *package* `Contextily` permite adicionar um *basemap*  \n```{python}\n# Import contextily\nimport contextily\n    \n# Existem diferenças entre o CRS!\nprint(\"CRS of the GeoDataFrame:\", gdf_aces.crs)\nprint(\"CRS of the GeoDataFrame:\", gdf_nuts3.crs)\n\n# Diferença nos CRS -> Converter para WebMercator\ngdf_aces_m = gdf_aces.to_crs(\"epsg:3857\")\n\n# Obter apenas Municipios do Continente:\ngdf_nuts3_sel = gdf_nuts3.loc[gdf_nuts3.NUTS1 == '1']\n\n# Mostrar os 2 mapas:\n# Argumento cmap tem a predefinição de cores\n# Lista Referencias ColorMaps: https://matplotlib.org/stable/gallery/color/colormap_reference.html\n# Adicionar Transperência (alpha) ao layer\nax = gdf_nuts3_sel.plot(column='NUTS3', \n                        cmap='Set2', \n                        legend=True, \n                        figsize=(10, 8),\n                       alpha = 0.5)\n\n# Imprimir os pontos no mesmo ax (subplot)\n# Lista MatPlotLib cores: https://matplotlib.org/stable/gallery/color/named_colors.html\ngdf_aces_m.plot(ax=ax, \n                color='red',\n                markersize=30, \n                edgecolor='Black', \n                label='ACES')\n\n# Adicionar um BaseMap no Ax\ncontextily.add_basemap(ax)\n\n# Adicionar Legenda\nax.legend()\nplt.title('Localização das ACES por NUTS3')\n\n# Show the plot\nplt.show()\n```\n\nObter Informações sobre o Objecto de Geometria\n\nA partir do geometry conseguimos obter um conjunto de caracteristicas  \n```{python}\n# Tipo de Dados da coluna de Geometria\nprint (type(gdf_aces.geometry))\nprint (type(gdf_nuts3_sel.geometry))\nprint(gdf_nuts3_sel.info())\n```\n\nobter Área e Centroid  \n```{python}\n\n# Obter Informaçao Geografia - Utilizando gdf_caop\n# Importar geometry\nfrom shapely.geometry import Point, Polygon\n\n# Adicionar Nova coluna com area em Km2\n# Atenção Deveriamos adicionar novos atributos sempre a (Geo)DataFrame de Origem\n# Não adicionar a seleção, neste caso gdf_nuts3_sel!\ngdf_nuts3['area_km2'] = gdf_nuts3['geometry'].area / 10**6  \n\n# Ordenar por Area\narea_gdf = gdf_nuts3.sort_values(by='area_km2', ascending=False)\n\n# Print the GeoDataFrame with the new column\nprint(area_gdf[['NUTS3','NUTS3_DSG', 'area_km2']])\n```\n\nadicionar nova coluna com o centroide  \n```{python}\n# Criar Nova coluna com Centroid\n# Adicionar Nova coluna com centroid\ngdf_nuts3['mn_center'] = gdf_nuts3['geometry'].centroid  \n\n# Print the GeoDataFrame with the new column\nprint(gdf_nuts3[['NUTS3','NUTS3_DSG', 'mn_center']])\n```\n\n\ncalcular a distancia entre dois pontos  \n```{python}\n#import geopandas as gpd\n#from shapely.geometry import Point, Polygon\n\n# Calcular diancia entre 2 ACES ('Amadora' and 'Lisboa Central')\n\n# Como dados são em Graus Decimais será necessário de os converter para Metricos\nprint(\"CRS gdf_aces:\", gdf_aces.crs)\n\norigem = 'Amadora'\ndestino = 'Grande Porto V - Porto Ocidental'\n# Converter para WebMercator\ngdf_aces_m = gdf_aces.to_crs(\"epsg:3857\")\n\n# Filtrar as geometrias para obter a Origem e Destino definidos\norigem_geometry = gdf_aces_m[gdf_aces_m['ACES'] == origem]['geometry'].iloc[0]\ndestino_geometry = gdf_aces_m[gdf_aces_m['ACES'] == destino]['geometry'].iloc[0]\n\n# Calculate the distance between 'Amadora' and 'Lisboa Central'\ndistance_km = origem_geometry.distance(destino_geometry) / 1000  # Converter para quilómetro\n\nprint(f\"A distância entre {origem} e {destino} é aproximadamente  {distance_km:.2f} quilómetros.\")\n```\n\n### Juntar Dados a um GDF\n\n#### Censos 2021\n\nimporta dados de Censos2021 por NUTS3 e Municipio  \n```{python}\n#| eval: false\n\n# Obter Password e Utilizador para Ligacao SQL\n#from getpass import getpass # para ler a password sem a mostrar\nmy_user = '\"BRUNO.LIMA\"'  \nmy_password = getpass(\"Password: \")\n\n# Ler Dados da BD\n# criar conexão\nimport cx_Oracle \nimport pandas as pd\nhost = 'c21oradev01.int.ine.pt'\nport = '1521'\nservice = 'FORMACAO'\ndsn_tns = cx_Oracle.makedsn(host, port, service_name=service) \n\n# Criar a conexão com todos os elementos,\n# incluingo user e password\nconn = cx_Oracle.connect(user=my_user, password=my_password, dsn=dsn_tns) \n\n# Cursor:\n# Criar o cursor na conexão conn que criámos antes\nc = conn.cursor()\n\n# ---------------------------------\n# Ler View com Dados por NUTS3:\n\n# SQL String\nmy_sql = \"\"\"\nselect *\nfrom BDIFRM.V_BGRI2021_N3_PT \n\"\"\"\n\n# Executar o cursor c com a string como parâmetro\nc.execute(my_sql)\n# Criar Nomes colunas\nnames = [ x[0] for x in c.description]\ndf_n3_c2021 = pd.DataFrame(c.fetchall(), columns = names)\n\n# Fechar cursor\nc.close()\n\n# fechar conexão\nconn.close()\n\n```\n\nfazer JOIN dos dados GDF com as NUTS3  \n```{python}\n#| eval: false \n# Juntar Dados NUTS3 do C2021 a GDF com as areas NUTS3\n\n# gdf_nuts3 obtido de Shapefile NUTS3: NUTS3_2015_PT.shp (dados estão em WebMercator)\n# Colunas Comuns: NUTS3 e NUTS3 - podemos ver os valores em ambos os DF\n#print(sorted(df_n3_c2021.NUTS3.unique()))\n#print(sorted(gdf_nuts3.NUTS3.unique()))\n\n# Fazer o Join, especificar: DF\ngdf_nuts3_2 = gdf_nuts3.merge(df_n3_c2021, left_on='NUTS3', right_on='NUTS3', how='left') \n\nprint(gdf_nuts3_2.info())\n```\n\n### Criar Mapas Temáticos\n\nVisualizar a classificação da relação entre 2 variáveis por NUTS3  \n```{python}\n#| eval: false\n\n# Import packages\n# import matplotlib.pyplot as plt\n# import pandas as pd\n# import geopandas as gpd\n \n# Exemplo criar Plot dos Areas NUTS3 - Mostrando total de população 65+ no total de população\n# Utilizar geodataframe com join \"gdf_nuts3_2\"\n\n# Selecionar Dados Portugal Continental:\n# Fazer Seleção da NUTS1_x , houve rename da coluna apos join\ngdf_nuts3_sel = gdf_nuts3_2.loc[gdf_nuts3_2.NUTS1_x == '1']\n\n# Definir Legenda \nlgnd_kwds = {'loc': 'upper left', \n             'bbox_to_anchor': (1, 1.03), \n             'ncol': 2}\n\n# Generate the choropleth and store the axis\n# natural_breaks\nax = gdf_nuts3_sel.plot(column=gdf_nuts3_sel.N_INDIVIDUOS_65_OU_MAIS/gdf_nuts3_sel.N_INDIVIDUOS, \n                      scheme='quantiles', # natural_breaks, quantiles, equal_interval \n                      k=7, \n                      cmap='YlGn', \n                      legend=True,\n                      edgecolor = 'dimgray',\n                      legend_kwds  = lgnd_kwds)\n \n# Remover frames, ticks e tick labels do axis\nax.set_axis_off()\n\nplt.title('Relacao população 65+ no total de população')\nplt.show()\n```\n\n\n#### Exercício\n\nCriar Mapa Temático das NUTS com apresentação de cidades Estatisticas  \n```{python}\n#| eval: false\n\n# Fazer o Join de NUTS e dados dos Censos , especificar: DF\ngdf_nuts3_2 = gdf_nuts3.merge(df_n3_c2021, left_on='NUTS3', right_on='NUTS3', how='left')\n\nprint(gdf_nuts3_2.info())\n\n# Importar os dados das cidades\nficheiro = r'data\\CIDADES_PONTOS_CONT.csv'\n\n# Importar em DataFrame\nencoding = 'utf-8'\ndf_cidades = pd.read_csv(ficheiro, sep=';', encoding=encoding)\n\ndf_cidades.head()\n\n#from shapely.geometry import Point, Polygon\n\n# Criar coluna com geometry (mudar nome df e nomes atributos)\ndf_cidades['geometry'] = df_cidades.apply(lambda x: Point(float(x.LONGITUDE), float(x.LATITUDE)), axis=1)\n\n# Criar uma gdf a partir da coluna geometry (mudar nome df)\ngdf_cidades = gpd.GeoDataFrame(df_cidades, crs = \"EPSG:4326\", geometry = df_cidades.geometry)\n\n# Converter Cidades para WebMercator\ngdf_cidades_m = gdf_cidades.to_crs(\"epsg:3857\")\n\n# Utilizar: gdf_nuts3_2\n# Input variáveis: gdf_aces e gdf_nuts3_2\n\n# Selecionar Dados Portugal Continental:\n# Fazer Seleção da NUTS1_x , houve rename da coluna apos join\ngdf_nuts3_sel = gdf_nuts3_2.loc[gdf_nuts3_2.NUTS1_x == '1']\n\n# Definir Legenda \nlgnd_kwds = {'loc': 'upper left', \n             'bbox_to_anchor': (1, 1.03), \n             'ncol': 2}\n\n# Generate the choropleth and store the axis\n# natural_breaks\nax = gdf_nuts3_sel.plot(column=(gdf_nuts3_sel.N_EDIFICIOS_CONSTR_ANTES_1945+gdf_nuts3_sel.N_EDIFICIOS_CONSTR_1946_1980)/gdf_nuts3_sel.N_EDIFICIOS_CLASSICOS, \n                      scheme='quantiles', # natural_breaks, quantiles, equal_interval \n                      k=7, \n                      cmap='YlGnBu', \n                      legend=True,\n                      edgecolor = 'gray',\n                      legend_kwds  = lgnd_kwds)\n\n# Adicionar os Pontos no mesmo AX\ngdf_cidades_m.plot(ax=ax, color='lightcoral', markersize=10, edgecolor='Black', label='Cidades')\n\n# Adicionar Legenda\nplt.title('Rácio Edificios construidos até 1980 (com representação das cidades)')\n\n# Remover frames, ticks e tick labels do axis\nax.set_axis_off()\n\nplt.title('Relacao edificios até 1980 no total de edificios')\nplt.show()\n```\n\n```{python}\n#| eval: false\ngdf_cidades_m.explore()\n```\n\n### Folium\n\n```{python}\nimport folium\n\n# Mostrar Zona do INE \n# Lisboa: 38.738345820101536, -9.138601637922605\n# Porto: 41.150887961411634, -8.629046747840249\n# Longitude e Latitude\nine = folium.Map(location = [41.150887961411634, -8.629046747840249], \n                 zoom_start = 15)\n\nine\n```\n\nImportar Dataset com NUTS3  \n```{python}\n# Importar GeoPandas\nimport geopandas as gpd\n\n# Carregar Dados com read_file (Shapefile preferivel, GeoJSON -  Mais Lento)\n# Mudar Caminho para onde estão os dados - atenção de ter os ficheiros .shp\\.shx\\.dbf\\.prj\nfile_path = r\"data\\NUTS3_2015_PT.shp\"\n\n# Definir o encoding para evitar problemas de desenho dos nomes\nencoding = 'utf-8'  \n# Ler Shapefile:\ngdf_nuts3 = gpd.read_file(file_path, encoding=encoding)\n\ngdf_nuts3.loc[1,'geometry']\n```\n\nMostrar Localização Central da GDF das NUTS3  \n```{python}\n# Obter a Localização Central\n# Print the head of the urban_polygon\n#import geopandas as gdp\nimport folium\n\n# Obter o centroid de toda a geometria\n# Converter para 4326 e a seguir obter o centroid de união de toda a geometria\ngdf_nuts3_sel = gdf_nuts3.loc[gdf_nuts3.NUTS1 == '1'] # Selecionar apenas o continente\ncentroid = gdf_nuts3_sel.to_crs(epsg=4326).unary_union.centroid\n\n# Criar Listagem com localização de latitude longitude\ncenter_map = [centroid.y, centroid.x]\n# Criar Mapa e mostrar\nfolium_map = folium.Map(location=center_map, zoom_start=8, tiles='OpenStreetMap')\n\nfolium_map\n```\n\nadicionar geografia (GDF) ao mapa  \n```{python}\n# Adicionar a Geografia a mapa\n# Print the head of the urban_polygon\n# import geopandas as gdp\n# import folium\n# from shapely.geometry import Point, Polygon\n\n# Converter para 4326 e a seguir obter o centroid de união de toda a geometria\ncentroid = gdf_nuts3_sel.to_crs(epsg=4326).unary_union.centroid\n\n# Criar Listagem com localização de latitude  longitude\ncenter_map = [centroid.y, centroid.x]\n# Criar Mapa e mostrar\nfolium_map = folium.Map(location=center_map, zoom_start=7, tiles='OpenStreetMap')\n\n# Adicionar Geografia folium map\n# folium.GeoJson constructor\nfolium.GeoJson(gdf_nuts3_sel).add_to(folium_map)\n\nfolium_map\n```\n\nadicionar pop e tooltip  \n```{python}\n#| eval: true\ngdf_nuts3_sel.info()\n\n# Incluir Informação de POPUP\n# Print the head of the urban_polygon\n#import geopandas as gdp\n#import folium\nimport folium.plugins \n\n# Converter para 4326 e a seguir obter o centroid de união de toda a geometria\ncentroid = gdf_nuts3_sel.to_crs(epsg=4326).unary_union.centroid\n\n# Criar Listagem com localização de latitude  longitude\ncenter_map = [centroid.y, centroid.x]\n\n# Criar Mapa e mostrar\nfolium_map = folium.Map(location=center_map, zoom_start=7, tiles='OpenStreetMap')\n\n# Codigo Especifico para tooltip\ntooltip = folium.GeoJsonTooltip(\n    fields=[\"NUTS3\"],\n    aliases=[\"NUTS3\"],\n    localize=True,\n    sticky=False,\n    labels=True,\n    style=\"\"\"\n        background-color: #F0EFEF;\n        border: 2px solid black;\n        border-radius: 3px;\n        box-shadow: 3px;\n    \"\"\",\n    max_width=800,\n)\n\n# Definir popup e nome\nfolium.GeoJson(gdf_nuts3_sel,\n        zoom_on_click = True,\n        popup = folium.GeoJsonPopup(\n            fields=['NUTS3','NUTS3_DSG'],\n            aliases=['NUTS3','NUTS3_DSG']\n        ),\n        tooltip = tooltip       \n               \n    ).add_to(folium_map) \n\n\nfolium_map\n# folium_map.save(r'data\\xxmap.html')\n```\n\n### Criar Mapa Temático em Folium  \n```{python}\n#| eval: false\n# Import packages\n# import pandas as pd\n# import geopandas as gpd\n# import folium, folium.plugins \n\n# Mesmo Exemplo criar Plot dos Areas NUTS3 - Mostrando total de população 65+ no total de população\n# Assegurar que foi efetuado Merge com Dados C2021\n# GDF input: gdf_nuts3_2\n\n# Selecionar Dados Portugal Continental: (copy() para criar nova coluna)\ngdf_nuts3_sel = gdf_nuts3_2.loc[gdf_nuts3_2.NUTS1_x == '1'].copy()\n\n# Novo Atributo\ngdf_nuts3_sel['ind65'] = gdf_nuts3_sel.N_INDIVIDUOS_65_OU_MAIS/gdf_nuts3_sel.N_INDIVIDUOS\n\n# Obter o centroid de toda a geometria\ncentroid = gdf_nuts3_sel.to_crs(epsg=4326).unary_union.centroid\n\n# Criar Listagem com localização de latitude  longitude\ncenter_map = [centroid.y, centroid.x]\n\n# Criar Mapa e mostrar\nfolium_map = folium.Map(location=center_map, zoom_start=6, tiles='OpenStreetMap')\n\n# Criar choropleth\nchoropleth = folium.Choropleth(\n    geo_data=gdf_nuts3_sel,\n    name='População 65+ mais',\n    data=gdf_nuts3_sel,\n    columns=['NUTS3', 'ind65'],\n    key_on='feature.properties.NUTS3',\n    fill_color='Reds', #\n    fill_opacity=0.5,\n    line_opacity=1.0,\n    bins =8,\n    legend_name='Relacao população 65+ no total de população'\n)\n\nfolium.GeoJson(gdf_aces,\nzoom_on_click = True).add_to(folium_map)\n\n# Adicionar a mapa\nchoropleth.add_to(folium_map)\n\n# Widget para controlar os layer visiveis            \nfolium.LayerControl().add_to(folium_map)\n\nfolium_map.save(r'data\\xxmap.html')\n\nfolium_map\n\n# Limpar Object da memoria\ngdf_nuts3_sel = None\n```\n\n\n\n<br>\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["epub.css"],"output-file":"600-mod6.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"theme":{"light":"flatly","dark":"solar"}},"extensions":{"book":{"multiFile":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","toc":true,"css":["epub.css"],"output-file":"600-mod6.epub"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente"},"metadata":{"bibliography":["references.bib"],"lang":"pt","date":"2024-03-31"},"extensions":{"book":{"selfContainedOutput":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":true,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":"H","fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":{"text":"\\usepackage{fvextra}\n\\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n\\areaset[0.50in]{4.5in}{8in}\n"},"include-before-body":{"text":"\\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n   showspaces = false,\n   showtabs = false,\n   breaksymbolleft={},\n   breaklines\n   % Note: setting commandchars=\\\\\\{\\} here will cause an error \n}  \n"},"output-file":"600-mod6.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrbook","classoption":["paper=6in:9in","pagesize=pdftex","headinclude=on","footinclude=on","12pt"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","epub","pdf"]}