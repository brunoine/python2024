{"title":"Data Science (Basics)","markdown":{"headingText":"Data Science (Basics)","containsRefs":false,"markdown":"\n::: {.callout-tip}\n## Conteúdos\n\nEstatísticas básicas em Python. \n\nApresentação dos *packages* `NumPy` e `Pandas`. \n\nFamiliarização com os aspectos fundamentais de bases de dados relacionais e o modelo relacional de gestão. \n\nConexões às bases de dados e interações através de consultas básicas de SQL.\n:::\n\n\n## Estatística Descritiva e Inferência\n\n$$D = \\{(\\vec{x}_1, y_1), ..., (\\vec{x}_n, y_n)\\} $$\n\n$(\\vec{x}, y) \\thicksim P$\n\ntipos de dados numericos: `int`, `float`\n\n```{python}\n# Creating integer variables\nx = 10\ny = -5\nz = 0\n```\n\n```{python}\ntype(x)\n```\n```{python}\n# Creating float variables\na = 3.14\nb = -0.5\nc = 2.0\n\n# Using the variables\n(a + b) * c\n```\n\n\ntipo sequencia: `list`, `tuple`, `range`, `numpy.array`\n```{python}\n# Creating a list of integers\nmy_list = [1, 2, 3, 4, 5]\n\n# Creating a list of strings\nnames = ['Alice', 'Bob', 'Charlie']\n\n# Creating a mixed-type list\nmixed_list = [1, 'hello', 3.14, True]\n```\n\n```{python}\n# Checking my_list\nmy_list\n```\n\nos elementos das listas são indexados\n```{python}\n# Accessing elements in the list my_list\nmy_list = [1, 2, 3, 4, 5]\n\n# Accessing the first element (index 0)\nfirst_element = my_list[0]\nprint(first_element)  \n\n# Accessing the third element (index 2)\nthird_element = my_list[2]\nprint(third_element)  \n\n# Accessing the last element\nlast_element = my_list[-1]\nprint(last_element)  \n\n# Accessing the second-to-last element\nsecond_to_last_element = my_list[-2]\nprint(second_to_last_element)  \n```\n\nnum intervalo incluimos o primeiro index mas não o último\n```{python}\n# Slicing to get a subset of elements\nsubset = my_list[1:4] \nprint(subset)  \n```\n\no operador `*` permite repetir a lista\n```{python}\n# Using list repetition\nmy_list * 2\n\nmy_list + my_list\n```\n\npara multiplicar cada elemento da lista:\n```{python}\n# Multiply every element of my_list by 2\nresult = [x * 2 for x in my_list]\nprint(result) \n```\n\nA função `lambda` em Python é uma função anónima:\n```{python}\nmy_list = [1, 2, 3, 4, 5]\nresult = list(map(lambda x: x * 2, my_list))\nprint(result)  \n```\n\npara alterar a lista original temos de fazer um ciclo\n```{python}\n# Update each element in the list by multiplying it by 2\nfor i in range(len(my_list)):\n    my_list[i] *= 2\n\nprint(my_list)  \n```\n\nordenação\n```{python}\n# Sort my_list in descending order\nmy_list.sort(reverse=True)\n\nprint(my_list) \n\n```\n\nconcatenar as listas usando o método extend\n```{python}\nmy_list = [1, 2, 3]\nanother_list = [4, 5, 6]\n\n# Concatenate another_list to my_list using the + operator\nmy_list += another_list\n\n# Concatenate another_list to my_list using the extend() method\nmy_list.extend(another_list)\n\nprint(my_list)  \n\n```\n\nou com append\n```{python}\n\n# Append each element from another_list to my_list using the append() method\nfor element in another_list:\n    my_list.append(element)\n\nprint(my_list)  \n```\n\neliminar elementos da lista por index\n```{python}\nmy_list = [1, 2, 3, 4, 5]\n\n# Remove the element at index 2 (which is 3) from my_list\ndel my_list[2]\n\nprint(my_list)  \n```\n\nOs tuplos são normalmente usados em vez de listas quando pretendemos que sejam imutáveis, por exemplo coordenadas, configurações, chaves de um dicionário...\n```{python}\n# Creating a tuple\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple) \n\ncoordinates = {(0, 0): 'origin', (1, 1): 'diagonal'}\ncoordinates\n```\n\nAs funções podem retornar múltiplos valores na forma de tuplo, permitindo um código conciso e eficiente. A descompactação de tuplos (tuple unpacking) é frequentemente usada para extrair os valores.\n```{python}\n# Tuple unpacking\ndef get_coordinates():\n    return 10, 20\n\nx, y = get_coordinates()\nprint(\"x:\", x)\nprint(\"y:\", y)\n```\nranges\n```{python}\n# Create a range of eggs\neggs = range(10)\neggs\n```\n```{python}\n# print all the elements in the range\nfor egg in eggs:\n    print(egg, end=\" \")\nprint()\n\ntype(eggs)\n\nlen(eggs)\n\nsum(eggs)\n\n```\n\ntipo texto (strings): `str`\n\ntipo booleano: `bool`\n```{python}\ndef is_even(number):\n    \"\"\"\n    Check if the given number is even.\n    \"\"\"\n    return number % 2 == 0\n\n# Test the function\nprint(is_even(4))  \nprint(is_even(7))  \n\nnum = 18\nif is_even(num):\n    print(f\"{num} is even.\")\nelse:\n    print(f\"{num} is odd.\")\n```\n\ntipo categorico: `pandas.Categorical`\n\ndados temporais: `datetime`, `panda.Series`, `pandas.DataFrame`\n\ndistribuições estatisticas: `scipy.stats`\n\nArrays: `numpy.array`\n\n### Dados quantitativos\n```{python}\nalturas = [1.65,1.73,1.78,1.67,1.82,1.76,1.75,1.74,1.75,1.67,1.67,1.69]\nlen(alturas)\ntype(alturas)\nalturas.sort(reverse=True)\nmedia_alturas = sum(alturas)/len(alturas)\nmedia_alturas\n```\n\nrepresentação gráfica com um scatterplot\n```{python}\npesos = [92, 87, 102, 78, 87, 76, 69, 62, 63, 58, 61, 62]\n\n# importing the required module\nimport matplotlib.pyplot as plt\n  \n# x axis values\nx = alturas\n# corresponding y axis values\ny = pesos\n  \n# plotting points as a scatter plot\n# s - point size, alpha - opacity\nplt.scatter(x, y, color= \"green\", marker= \"*\", s=40)\n\n# naming the x axis\nplt.xlabel('Altura em m')\n# naming the y axis\nplt.ylabel('Peso em Kg')\n  \n# giving a title to my graph\nplt.title('Alturas e Pesos dos Formandos')\n  \n# function to show the plot\nplt.show()\n\n?plt.scatter\n```\n\n### Dados quantitativos\n```{python}\nestado_civil = [\"solteiro\", \"casado\", \"solteiro\", \"divorciado\", \"solteiro\", \"solteiro\",\n               \"casado\", \"solteiro\", \"casado\", \"solteiro\", \"divorciado\", \"solteiro\"]\n              \nsolteiro_count = estado_civil.count(\"solteiro\")\n\ncasado_count = estado_civil.count(\"casado\")\n\ndivorciado_count = estado_civil.count(\"divorciado\")\ndivorciado_count\n```\n\nrepresentação gráfica (barras)\n```{python}\n# heights of bars\nheight = [solteiro_count, casado_count, divorciado_count]\n  \n# labels for bars\ntick_label = ['solteiro', 'casado', 'divorciado']\n  \n# plotting a bar chart\nplt.bar(tick_label, height, width = 0.8, color = 'blue')\n  \n# naming the x-axis\nplt.xlabel('Estado Civil')\n# naming the y-axis\nplt.ylabel('Nº de Indivíduos')\n# plot title\nplt.title('Frequências dos Estados Civis')\n  \n# function to show the plot\nplt.show()\n```\n\nA partir de um dicionário\n```{python}\nalturas_dict = { \"Teresa\": 165, \"Maria\": 169, \"Joao\": 178, \"Carlos\": 187,\n                \"Vasco\": 182, \"Joana\": 162, \"Sofia\": 165, \"Pedro\": 177,\n                \"Afonso\": 175, \"Miguel\": 177, \"Ana\": 163, \"Margarida\": 162}\n\n# converter para uma lista para depois fazerf o gráfico                \nalturas_list = list(alturas_dict.values())\nalturas_list\n```\n\nagora um histograma\n```{python}\nplt.hist(alturas_list, 4)\n\nplt.show()\n```\n\nestatisticas\n```{python}\n# Calcula a média usando a fórmula\nn = len(alturas_list)\nmed_alturas_list= sum(alturas_list)/n\n\nprint(\"Median: {0}\".format(med_alturas_list))\n```\n\n```{python}\n# Calcula a soma dos desvios quadrados\nss_alturas_list = sum((x - med_alturas_list)**2 for x in alturas_list)\nprint(ss_alturas_list)\n```\n\n```{python}\n# Variância amostral corrigida (da população) com ddof = 0\n# Variância amostral não corrigida com ddof = 1\nddof = 0\nvar_alturas_list = ss_alturas_list/(n-ddof)\nprint(var_alturas_list)\n\n# Desvio Padrão (corrigido - para alterar voltar ao passo anterior da variância)\ndp_alturas_list = var_alturas_list**0.5\nprint(dp_alturas_list)\n```\n\nusando uma pckage\n```{python}\nimport statistics as st\n\nprint(\"The mean is:\", st.mean(alturas_list))\nprint(\"The mode is:\", st.mode(alturas_list))\nprint(\"The median is:\", st.median(alturas_list))\nprint(\"The sample variance is:\", st.variance(alturas_list))\nprint(\"The population variance is:\",st.pvariance(alturas_list))\nprint(\"The sample standard deviation is:\",st.stdev(alturas_list))\nprint(\"The population standard deviation is:\",st.pstdev(alturas_list))\n\nprint(\"The median is:\", st.median(alturas_list))\n# N = 4 devolve os 3 quartis superiores - percentis 25 e 75\nprint(\"The first three quartiles are:\", st.quantiles(alturas_list, n = 4))\n\nprint(\"The median is:\", st.median(alturas_list))\n# N = 10 devolve  - percentil 10, 20, ... , 90\nprint(\"The percentiles are:\", st.quantiles(alturas_list, n = 10))\n```\n\n### Numpy\n\n```{python}\nimport numpy as np\n\n```\n\no vector (*array*) é o objecto principal no NumPy\n\ncriar array a partir de lista\n```{python}\nalturas_list\n\narray = np.array(alturas_list)\narray\n```\nOs elementos dos array têm de ser todos do mesmo tipo.\n\narray 2D e 3D\n```{python}\narray_2D = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narray_2D\n\nint_list = [[[1,2,4,4,5], [5,7,7,9,3], [3,2,5,3,6], [6,8,9,5,1]],\n             [[8,9,3,4,3], [4,6,4,3,3], [2,6,3,6,6], [8,5,7,2,1]],\n             [[1,2,7,9,5], [4,8,7,7,3], [8,5,7,6,7], [2,4,4,5,4]]]\narray_3D = np.array(int_list)\narray_3D\n```\n\nCriar um array a partir do zero\n```{python}\n# Criar um array de inteiros de tamanho 10 (length-10) preenchido a zeros\nnp.zeros(10, dtype=int)\n\n# Criar um array de 3x5 (3 linhas e 5 colunas) com dados do tipo floating-point preenchido a 1s\nnp.ones((3, 5), dtype=float)\n# criar arrau 3D\nnp.ones((2, 4,6), dtype=float)\n\n# Criar um array de 3x5 (3 linhas e 5 colunas) com 3.14\nnp.full((3, 5), 3.14)\n\n# Criar um array de -3 a 4 com espaçamento igual entre os seus elementos\n# atenção que o valor inicial está incluido mas o de stop não\nnp.arange(-3,4)\n\n# Criar um array preenchido com uma sequência de 0 até 20 saltando de 2 em 2\n# quando se passa um terceiro argumento é interpretado como o espaçamento\nnp.arange(0, 20, 2)\n\n# Criar um array de 5 valores igualmente espaçados entre 0 e 1\nnp.linspace(0, 1, 5)\n```\n\nos array são iteráveis\n\ntodos os iteradores são iteráveis (o contrário não é válido)\n\n```{python}\nclass SquaresIterator:\n    def __init__(self, n):\n        self.n = n\n        self.current = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current >= self.n:\n            raise StopIteration\n        result = self.current ** 2\n        self.current += 1\n        return result\n\n# Criar o iterador\niterator = SquaresIterator(5)\n\n# Usar o iterador para mostrar os valores\nwhile True:\n    try:\n        num = next(iterator)\n        print(num)\n    except StopIteration:\n        break\n```\nfunção gerador\n```{python}\n# Definir o gerador\ndef squares(n):\n    current = 0\n    while current < n:\n        yield current ** 2\n        current += 1\n\n# Criar o iterador\nsquares_generator = squares(5)\n\n# Usar o iterador para imprimir os valores\nfor num in squares_generator:\n    print(num)\n```\n\nfazer um contador regressivo\n```{python}\n# Definir o gerador\ndef countdown(n):\n  while n >= 0:\n    yield n \n    n -= 1\n\n# Criar o iterador instanciado com o valor 3\ncountdown_generator = countdown(3)\n\n# Usar o iterador para imprimir os valores\nfor minutos in countdown_generator:\n    print(minutos)\n\n```\ncriar amostras pseudo/aleatorias>\n```{python}\n# Criar um array de 3x5 de valores aleatórios entre 0 e 1\n# a partir de uma distribuição uniforme contínua.\n# cada número gerado tem a mesma probabilidade de ocorrer dentro do intervalo\nnp.random.random((3, 5))\n\n# Criar um array de 3x3 de números aleatórios com uma distribuição normal\n# com média 0 e desvio padrão 1\nnp.random.normal(0, 1, (3, 3))\n\n# Criar um array de 3x3 de números aleatórios no intervalo de [0, 10[\n# notem que 0 pertece ao intervalo mas 10 não...\nnp.random.randint(0, 10, (3, 3))\n```\n\ndefinir semente\n```{python}\n# Define a semente\nnp.random.seed(42)\n\n# Gera uma matriz 3x3 de números aleatórios duma distribuição normal\nnormal_array = np.random.normal(loc=0, scale=1, size=(3, 3))\n\nprint(normal_array)\n\n# Criar uma matriz identidade de 5x5\nnp.eye(5)\n```\nexercicios\n```{python}\n# Proposta de Exercicio\n# Converta a lista de sudoku num array e mostre no écran o tipo da nova variável\n# sudoku_array para demonstrar que o código funcionou correctamente\nsudoku_list = [\n  [0, 0, 4, 3, 0, 0, 2, 0, 9], [0, 0, 5, 0, 0, 9, 0, 0, 1], [0, 7, 0, 0, 6, 0, 0, 4, 3],\n  [0, 0, 6, 0, 0, 2, 0, 8, 7], [1, 9, 0, 0, 0, 7, 4, 0, 0], [0, 5, 0, 0, 8, 3, 0, 0, 0],\n  [6, 0, 0, 0, 0, 0, 1, 0, 5], [0, 0, 3, 5, 0, 8, 6, 9, 0], [0, 4, 2, 9, 1, 0, 3, 0, 0]\n               ]\n               \nprint(type(sudoku_list))\n```\n\npassar para array\n```{python}\nsudoku_array = np.array(sudoku_list)\nprint(type(sudoku_array))\n```\n\nCriar um array de zeros com 4 colunas e 10 linhas \n```{python}\n# Proposta de Exercicio\n# mostrar no écran o array para demonstrar que o código funcionou correctamente\nzero_array = np.zeros((10,4))\nzero_array\n```\n\n\n```{python}\n# criação do doubling array que será mostrado no eixo do y\ndoubling_array = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n\n# criação do one_to_ten array que será mostrado no eixo do x\none_to_ten =np.arange(1,11)\n\n# código de display do plot que terá de ser adaptado\nplt.scatter(one_to_ten, doubling_array)\nplt.show()\n```\n\n\n### Atributos dos arrays NumPy\n\nobjecto do tipo gerador para numeros aleatorios\n```{python}\nrng = np.random.default_rng(seed=2012) \ntype(rng)\n```\n\ncria array com valores até 3 com 6 elementos\n```{python}\nx1 = rng.integers(3, size = 6)  \nx1\n```\n\n```{python}\nrng = np.random.default_rng(seed=2012)  # seed for reproducibility\n\nx2 = rng.integers(10, size=(3, 4))  # two-dimensional array\nprint('x2 tem {0} dimensões e uma shape {1} o seu conteúdo é '.format(x2.ndim, x2.shape))\nprint('{0}'.format(x2))\n```\nmultidimensoes\n```{python}\nrng = np.random.default_rng(seed=2012)  # seed for reproducibility\n\nx5 = rng.integers(10, size=(3, 4, 2, 5, 9))  # two-dimensional array\nprint('x5 tem {0} dimensões e uma shape {1} o seu conteúdo é '.format(x5.ndim, x5.shape))\n\n#print('{0}'.format(x5))\n```\n\n\nmudar a shape dos arrays NumPy\n```{python}\nx1=np.arange(1,6)\nprint(x1)\nprint(x1.shape)\n```\n`flatten()`, `reshape()`\n\n```{python}\narray = np.array([[1,2], [3,4], [5,6]])\n\nflat_array = array.flatten()\n\ndiff_array = flat_array.reshape(2,3)\n\nprint(array)\n```\n```{python}\nprint(flat_array.shape, flat_array, flat_array.size)\n\nprint(diff_array.shape, diff_array, diff_array.size, diff_array.dtype, diff_array.ndim)\n```\n```{python}\nnp.array([1.32, 5.78, 175.55]).dtype\n\nnp.array([\"Python\", \"para\", \"Estatísticas\",\"Oficiais\", \"otorrinolaringologista\"]).dtype\n\nboolean_array = np.array([[True, False], [False, False]], dtype=np.bool_)\nprint(boolean_array.dtype)\nboolean_array.astype(np.int32)\n```\n```{python}\nnp.array([True, 42, 42.42, \"Hitchikers' Guide to the Galaxy\"]).dtype\n```\nexercicios\n```{python}\nsudoku_game = np.array([[0, 0, 4, 3, 0, 0, 2, 0, 9],\n       [0, 0, 5, 0, 0, 9, 0, 0, 1],\n       [0, 7, 0, 0, 6, 0, 0, 4, 3],\n       [0, 0, 6, 0, 0, 2, 0, 8, 7],\n       [1, 9, 0, 0, 0, 7, 4, 0, 0],\n       [0, 5, 0, 0, 8, 3, 0, 0, 0],\n       [6, 0, 0, 0, 0, 0, 1, 0, 5],\n       [0, 0, 3, 5, 0, 8, 6, 9, 0],\n       [0, 4, 2, 9, 1, 0, 3, 0, 0]])\n\nsudoku_solution = np.array([[8, 6, 4, 3, 7, 1, 2, 5, 9],\n       [3, 2, 5, 8, 4, 9, 7, 6, 1],\n       [9, 7, 1, 2, 6, 5, 8, 4, 3],\n       [4, 3, 6, 1, 9, 2, 5, 8, 7],\n       [1, 9, 8, 6, 5, 7, 4, 3, 2],\n       [2, 5, 7, 4, 8, 3, 9, 1, 6],\n       [6, 8, 9, 7, 3, 4, 1, 2, 5],\n       [7, 1, 3, 5, 2, 8, 6, 9, 4],\n       [5, 4, 2, 9, 1, 6, 3, 7, 8]])\n```\n\n```{python}\n# Usando os arrays já definidos sudoku_game e sudoku_solution \n# crie um array 3D com o jogo e a solução\ngame_and_solution = np.array([sudoku_game, sudoku_solution])\nprint(game_and_solution)\ngame_and_solution.shape\n```\n\n```{python}\nnew_sudoku_game = np.array([[0, 0, 4, 3, 0, 0, 2, 0, 9],\n       [0, 0, 5, 0, 0, 9, 0, 0, 1],\n       [0, 7, 0, 0, 6, 0, 0, 4, 3],\n       [0, 0, 6, 0, 0, 2, 0, 8, 7],\n       [1, 9, 0, 0, 0, 7, 4, 0, 0],\n       [0, 5, 0, 0, 8, 3, 0, 0, 0],\n       [6, 0, 0, 0, 0, 0, 1, 0, 5],\n       [0, 0, 3, 5, 0, 8, 6, 9, 0],\n       [0, 4, 2, 9, 1, 0, 3, 0, 0]])\n\nnew_sudoku_solution = np.array([[8, 6, 4, 3, 7, 1, 2, 5, 9],\n       [3, 2, 5, 8, 4, 9, 7, 6, 1],\n       [9, 7, 1, 2, 6, 5, 8, 4, 3],\n       [4, 3, 6, 1, 9, 2, 5, 8, 7],\n       [1, 9, 8, 6, 5, 7, 4, 3, 2],\n       [2, 5, 7, 4, 8, 3, 9, 1, 6],\n       [6, 8, 9, 7, 3, 4, 1, 2, 5],\n       [7, 1, 3, 5, 2, 8, 6, 9, 4],\n       [5, 4, 2, 9, 1, 6, 3, 7, 8]])\n```\n\n```{python}\n# Usando os novos já definidos new_sudoku_game e new_sudoku_solution\n# crie um novo array 3D com o novo jogo e a nova solução.\nnew_game_and_solution = np.array([new_sudoku_game, new_sudoku_solution])\n\n# Depois usando o arrays 3D do exercicio anterior e o agora criado \n# agrupe-os num novo array 4D\ngames_and_solutions = np.array([game_and_solution, new_game_and_solution])\n\n# Verifique a sua shape\ngames_and_solutions.shape\n```\n\n```{python}\nprint(games_and_solutions)\n```\n\n### Aceder aos elementos\n\n```{python}\nx1\n\n# Aceder ao primeiro elemento \n# (começa em zero)\nprint(\"O primeiro elemento é {0} e o segundo {1}\" .format(x1[0], x1[1]))\n\n# Aceder ao ante-penultimo elemento\nx1[-3]\n\n# Aceder ao 1º elemento da 2ª linha\n# (linha e coluna começam em zero)\nx2\nx2[2,3]\n```\n\nslicing arrays\n```{python}\nx1=np.arange(0,10)\n\nx1\n```\n```{python}\nx1[:3]\n\nx1[3:]\n\nx1[1:6:2]\n```\n\nmodificar células\n```{python}\nx1[0] = 11\nx1\n\nx2[0,2] = 5\nx2\n\nx2[-1,0] = 6\nx2\n```\n\nSubarrays Multidimensionais\n```{python}\nprint(x2)\n# fatia das 2 primeiras linhas\n# as 3 primeiras colunas\nx2[:2, :3] \n\nx2[0:2, 0:2]\n\nx2[::-1, ::-1]\n\n# fatia a primeira coluna de x2\nx2[:, 0] \n\n# igual a x2[0, :]\nx2[0, 0:4]\n```\n\nCriar Cópias de Subarrays\n```{python}\n# x2_sub é uma view e não uma cópia!!!\nx2_sub = x2[:2, :2]\nprint(x2_sub)\n\nx2_sub[0, 0] = 99\nprint(x2_sub)\nprint(x2)\n\nx2_sub_copy = x2[:2, :2].copy()\nprint(x2_sub_copy)\n\nx2_sub_copy[0, 0] = 42\nprint(x2_sub_copy)\nprint(x2)\n\n```\n\nReshape do Array\n```{python}\n# criar uma grid de 3 por 3\ngrid = np.arange(1, 10).reshape(3, 3)\nprint(grid)\n\ngrid.reshape((1, 9))\n\ngrid.reshape((9,1))\n\n# criar um vector em linha através do reshape\nx = np.array([1, 2, 3])\nx\n\n# criar um vector em linha através do newaxis\nx[np.newaxis, :] \n\n# criar um vector em coluna através do reshape\nx.reshape((3, 1))\n\n# criar um vector em coluna através do newaxis\nx[: ,np.newaxis] \n```\n\nConcatenação de Arrays\n```{python}\nx = np.array([1, 2, 3])\ny = np.array([3, 2, 1])\nnp.concatenate([x, y])\n\n# concatenar mais do que 2 arrays de cada vez\nz = np.array([99, 99, 99])\nprint(np.concatenate([x, y, z]))\n```\n\n```{python}\ngrid = np.array([[1, 2, 3],\n                 [4, 5, 6]])\n# concatenar ao longo do eixo 1\nnp.concatenate([grid, grid])\n```\n\n```{python}\n# concatenar ao longo do 2º eixo\n# (indice dos eixos começa em zero)\nnp.concatenate([grid, grid], axis=1)\n\n# stack vertical de arrays\nnp.vstack([x, grid])\n\n# stack horizontal de arrays\ny = np.array([[99],\n              [99]])\nnp.hstack([grid, y])\n\nx_exp0 = np.expand_dims(x, axis=0)\nprint(x)\nprint(x_exp0)\n```\n\n```{python}\n# Definindo duas matrizes bidimensionais\nx = np.array([[1, 2],\n              [3, 4]])\n\ny = np.array([[5, 6],\n              [7, 8]])\n\n# Adicionando uma dimensão extra às matrizes\nx_expandido = np.expand_dims(x, axis=2)\ny_expandido = np.expand_dims(y, axis=2)\n\n# Concatenando as matrizes ao longo da terceira dimensão usando np.dstack()\nresultado = np.dstack((x_expandido, y_expandido))\n\nprint(x)\nprint(x_expandido)\nprint(resultado)\n\nx_exp1 = np.expand_dims(x, axis=1)\nx_exp1\n\nx_exp3 = np.expand_dims(x, axis=2)\nx_exp3\n\nx_exp2 = np.expand_dims(x, axis=2)\nx_exp2\n```\n\nSplit de Arrays\n```{python}\nx = [1, 2, 3, 99, 99, 3, 2, 1]\nx1, x2, x3 = np.split(x, [3, 5])\nprint(x1, x2, x3)\n\ngrid = np.arange(16).reshape((4, 4))\ngrid\n\nupper, lower = np.vsplit(grid, [2])\nprint(upper)\nprint(lower)\n\nleft, right = np.hsplit(grid, [2])\nprint(left)\nprint(right)\n\n```\n\nAritmética de Arrays\n\nos operadores aritméticos são *universal functions* (Ufuncs)\n```{python}\nx = np.arange(4)\nprint(\"x      =\", x)\nprint(\"x + 5  =\", x + 5)\nprint(\"x - 5  =\", x - 5)\nprint(\"x * 2  =\", x * 2)\nprint(\"x / 2  =\", x / 2)\nprint(\"x // 2 =\", x // 2)  # divisão inteira\n\nprint(\"-x     = \", -x)     # - negação\nprint(\"x ** 2 = \", x ** 2) # ** quadrado\nprint(\"x ** 3 = \", x ** 3) # ** cubo\nprint(\"x % 2  = \", x % 2)  # % resto da divisão\n\nprint(\"e^x =\", np.exp(x))       # exponencial de base e\nprint(\"2^x =\", np.exp2(x))      # exponencial de base 2\nprint(\"3^x =\", np.power(3., x)) # exponencial de base 3\n\n# as operacções inversas das exponenciais, os logaritmos\n# também estão disponíveis\nx = [1, 2, 4, 10]\nprint(\"x        =\", x)\nprint(\"ln(x)    =\", np.log(x))\nprint(\"log2(x)  =\", np.log2(x))\nprint(\"log10(x) =\", np.log10(x))\n```\n\nProdutos Externos\n```{python}\nx = np.arange(1, 6)\nx\n\nnp.multiply.outer(x, x)\n\n```\n\nAgregações\n```{python}\nx = np.arange(1, 6)\nx\n\nnp.add.reduce(x)\n\nnp.multiply.reduce(x)\n\nnp.add.accumulate(x)\n\nnp.multiply.accumulate(x)\n\nrng = np.random.default_rng()\nbig_array = rng.random(1000000)\n\n# %timeit sum(big_array)\n# %timeit np.sum(big_array)\n\nnp.min(big_array), np.max(big_array)\n```\n\nEstatísticas Básicas\n```{python}\n# Alturas dos primeiros ministros portugueses\nalturas = np.array([169, 170, 159, 173, 173, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183, 182,\n                   178, 173, 174, 173, 176, 164, 170, 173, 182, 180, 183, 178, 182, 174, 175, 179,\n                   174, 173, 162, 173, 171, 165, 164, 168, 175, 165, 181, 172])\n                   \nprint(\"Média das Alturas:       \", np.mean(alturas))\nprint(\"Desvio Padrão:           \", np.std(alturas))\nprint(\"Altura Minima:    \", np.min(alturas))\nprint(\"Altura Máxima:    \", np.max(alturas))\n\nprint(\"Percentil 25:   \", np.percentile(alturas, 25))\nprint(\"Mediana:            \", np.median(alturas))\nprint(\"Percentil 75:   \", np.percentile(alturas, 75))\n\n#%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.hist(alturas,6)\nplt.title('Distribuição das Alturas dos Primeiro Ministros')\nplt.xlabel('Altura (cm)')\nplt.ylabel('Número');\n\nimport scipy.stats as st\n\n# criar um intervalo de confiança a 95% para a altura média da população\n# usando a distribuição normal\nst.norm.interval(confidence=0.95, loc=np.mean(alturas), scale=st.sem(alturas))\n\n#%pwd\n```\n\n\n```{python}\n# Linux\n# datadir = \"../../../../Datasets/Hospital/\"\n\n# Windows\n# datadir = \"..\\\\..\\\\..\\\\..\\\\Datasets\\\\Hospital\\\\\"\ndatadir =\"data\\\\\"\nfilename = \"D_Internamento_1.csv\"\n```\n\n```{python}\nimport pandas as pd \n\ndf_int = pd.read_csv(f\"{datadir}{filename}\", skiprows=2)\ndf_int.head()\n```\n\n```{python}\nprint(df_int.D010002.min())\nprint(df_int.D010002.max())\n\nprint(df_int.D010004.min())\nprint(df_int.D010004.max())\n```\n\n```{python}\ndef plot_hist(x, p=5):\n # Plot the distribution and mark the mean\n plt.hist(x, alpha=.5)\n plt.axvline(x.mean())\n # 95% confidence interval \n plt.axvline(np.percentile(x, p/2.), color='red', linewidth=3)\n plt.axvline(np.percentile(x, 100-p/2.), color='red', linewidth=3)\n \ndef plot_dists(a, b, nbins, a_label='com_p', b_label='sem_p', p=5):\n # Create a single sequence of bins to be shared across both\n # distribution plots for visualization consistency.\n combined = pd.concat([a, b])\n breaks = np.linspace(\n combined.min(), \n combined.max(), \n num=nbins+1)\n plt.subplot(2, 1, 1)\n plot_hist(a)\n plt.title(a_label)\n \n plt.subplot(2, 1, 2)\n plot_hist(b)\n plt.title(b_label)\n \n plt.tight_layout()\n \nplot_dists(df_int.D010002, df_int.D010004, 20, a_label='Com Parecer', b_label='Sem parecer')\nplt.show()\n```\n\n### Introdução às bases de dados e modelos\n\nestabelecer ligação a base de dados\n\n```{python}\n#| eval: false\n# importar package \nimport cx_Oracle # cx_Oracle to access Oracle database\n\n# criar conexão\n# host = c21oradev01.int.ine.pt\n# port = 1521\n# service =FORMACAO\ndsn_tns = cx_Oracle.makedsn('c21oradev01.int.ine.pt', '1521', \n                            service_name='FORMACAO') \n```\n\npedir `user` e `password`\n```{python}\n#| eval: false\n \n# importar package em vez do package todo\n# trazer só o método getpass\nfrom getpass import getpass # para ler a password sem a mostrar\n\nmy_user = \"BRUNO.LIMA\"\nmy_password = \"*******\"\n```\n\ncriar ligação\n```{python}\n#| eval: false\n\n\n# Criar a conexão com todos os elementos,\n# incluingo user e password\nconn = cx_Oracle.connect(user=my_user, password=my_password, dsn=dsn_tns) \n```\n\nabrir cursor\n```{python}\n#| eval: false\n\n\n# Criar o cursor na conexão conn que criámos antes\nc = conn.cursor()\n```\n\nconstruir query sql\n```{python}\n#| eval: false\n\nmy_sql = \"\"\"\nSELECT ano, nordem, nuts2, dtcc_cod, ent_cod\nFROM BDIFRM.TD_HOSP_10\n\"\"\"\n```\n\nexecutar\n```{python}\n#| eval: false\n\nc.execute(my_sql)\n```\n\nguardar dados\n```{python}\n#| eval: false\n\n# guardar os dados numa estrutura Python Pandas\nimport pandas as pd\n\ndf = pd.DataFrame(c.fetchall())\n```\n\nfechar cursor\n```{python}\n#| eval: false\n\nc.close()\n```\n\nfechar conexão à base de dados\n```{python}\n#| eval: false\n\nconn.close()\n```\n\nexplorar os dados\n```{python}\n#| eval: false\n\ndf.head()\n\n# atribuir os nomes das colunas\nnomes_col = [\"ano\", \"nordem\", \"nuts2\", \"dtcc_cod\", \"ent_cod\"]\ndf.columns = nomes_col\n```\n\nguardar num ficheiro .csv\n```{python}\n#| eval: false\n\ndf.head()\n\ndf.to_csv('data/tsee_2023.csv', index=False)\n```\n\nexercicio\n\nvoltar a criar ligação\n```{python}\n#| eval: false\n\n# Criar a conexão com todos os elementos,\n# incluingo user e password\nconn = cx_Oracle.connect(user=my_user, password=my_password, dsn=dsn_tns) \n```\n\nvoltar a criar cursor\n```{python}\n#| eval: false\n\n# Criar o cursor na conexão conn que criámos antes\nc = conn.cursor()\n```\n\ncontar nº de registos\n```{python}\n#| eval: false\n\nmy_sql = \"\"\"\nselect count(1) from\nBDIFRM.TD_HOSP_10\n\"\"\"\n```\n\nexcecutar\n```{python}\n#| eval: false\n\nc.execute(my_sql)\n```\n\nler dados\n```{python}\n#| eval: false\n\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n\ncontar distritos:\n```{python}\n#| eval: false\n\nmy_sql= \"\"\"\nselect dtcc_cod, count(1) from BDIFRM.TD_HOSP_10\ngroup by dtcc_cod\n\"\"\"\n```\n\nexcecutar\n```{python}\n#| eval: false\n\nc.execute(my_sql)\n```\n\nler dados\n```{python}\n#| eval: false\n\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n\ndistritos com 6:\n```{python}\n#| eval: false\n\nmy_sql= \"\"\"\nselect * from BDIFRM.TD_HOSP_10\nwhere dtcc_cod like '%6%'\n\"\"\"\n```\n\nexcecutar\n```{python}\n#| eval: false\n\nc.execute(my_sql)\n```\n\nler dados\n```{python}\n#| eval: false\n\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n\nNUTS2 11 ou 17 de 2012:\n```{python}\n#| eval: false\n\nmy_sql= \"\"\"\nselect * from BDIFRM.TD_HOSP_10\nwhere nuts2 in ('11', '17') AND ano = '2012'\n\"\"\"\n```\n\nexcecutar\n```{python}\n#| eval: false\n\nc.execute(my_sql)\n```\n\nler dados\n```{python}\n#| eval: false\n\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n\ncontar pessoal ao serviço em tabela de hospitais\n```{python}\n#| eval: false\n\n# query\nmy_sql= \"\"\"\nselect ano, sum(c10001), sum(c10002), sum(c10003)\nfrom BDIFRM.TD_RECHUM1_10\nwhere ano = '2012'\ngroup by ano\n\"\"\"\n# executa\nc.execute(my_sql)\n# faz fetch\ndf = pd.DataFrame(c.fetchall())\n# mostra resultado\ndf\n```\n\nexemplos com joins e grupos\n```{python}\n#| eval: false\n\nmy_sql = \"\"\"\nselect t.ano, t.nuts2, t.dtcc_cod, m.cc_dsg, \nsum(r.C21041) cardio_total, sum(r.C21042) cardio_homnes, sum(r.C21043) cardio_mulheres \nfrom BDIFRM.TD_HOSP_10 h\nleft join BDIFRM.TD_NUM_10 m \non h.dtcc_cod = m.dtcc_cod\nleft join BDIFRM.REC_HUM1_10 r\non h.nordem = r.nordem\n--using (dtcc_cod)\nwhere nuts2 like '%1'\ngroup by t.ano, t.nuts2, t.dtcc_cod, m.cc_dsg\n\"\"\"\n# executa\nc.execute(my_sql)\n# faz fetch\ndf = pd.DataFrame(c.fetchall())\n# mostra resultado\ndf\n\n```\n\nfechar cursor e conexção\n```{python}\n#| eval: false\n\nc.close()\n\nconn.close()\n```\n\n\n## Series e Dataframes\n\n### Series\n```{python}\nimport pandas as pd\nimport numpy as np\n\ndata = pd.Series([0.25, 0.5, 0.75, 1.0])\ndata\n```\n\n```{python}\ndata.values\n```\n\n```{python}\ndata.index\n```\n\naceder aos elementos series\n```{python}\n# acesso ao 2º elemento\n# lembrar que começa em 0\ndata[1]\n# acesso a 2 elementos no meio da Series \n# tal como no Numpy o último não está contido\ndata[1:3]\n# acesso a todos os elementos a partir do 3º\ndata[2:]\n```\n\nIndexes nas series\n```{python}\ndata = pd.Series([0.25, 0.5, 0.75, 1.0],\n                 index=['a', 'b', 'c', 'd'])\ndata\n```\n\n\n```{python}\npopulation_dict = {'Lisboa': 544325,'Sintra': 385989, 'Vila Nova de Gaia': 304233,\n                   'Porto': 231834, 'Cascais': 214239, 'Loures': 201349,\n                   'Braga': 193324, 'Almada': 177943}\npopulation = pd.Series(population_dict)\npopulation\n```\n\ncom indexes explicitos o último elemento está contido no slice\n```{python}\nserie = pd.Series({2:'a', 1:'b', 3:'c'})\n\nserie[1:3]\n```\nconstruir series\n```{python}\npd.Series([2, 4, 6])\n\npd.Series(10, index=[10, 20, 30])\n\npd.Series({2:'a', 1:'b', 3:'c'})\n\npd.Series({'a':1.2, 'b':1.5, 'c':1.7})\n```\n\n### DataFrames\n```{python}\narea_dict = {'Lisboa': 100.1,'Sintra': 23.8, 'Vila Nova de Gaia': 56.3,\n                   'Porto': 41.4, 'Cascais': 97.1, 'Loures': 11.8,\n                   'Braga': 41, 'Almada': 14.7}\narea = pd.Series(area_dict)\narea\n```\n\n```{python}\npopulation\n```\n\njuntar numa dataFrame\n```{python}\ncities = pd.DataFrame({'population': population,\n                       'area': area})\ncities\n```\n\n```{python}\n# atributo index \ncities.index\n\n# atributo columns \ncities.columns\n```\n\ncriar dataFrame a partir de uma serie\n```{python}\n# a partir de um único objecto Series\npd.DataFrame(population, columns=['population'])\n```\n\ncom um array\n```{python}\n# a partir de um array Numpy 2D\npd.DataFrame(np.random.rand(3, 2),\n             columns=['col1', 'col2'],\n             index=['a', 'b', 'c'])\n```\n\ncom um dicionario\n```{python}\n# a partir de uma lista de dicionarios\ndata = [{'simples': i, 'dobro': 2 * i, 'triplo': 3 * i}\n        for i in range(6)]\npd.DataFrame(data)\n```\n\n```{python}\n# se algumas chaves do dicionário estiverem em falta\n# vão ser preenchidas com o valor NaN\npd.DataFrame([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}])\n```\n\n```{python}\n# a partir de um dicionário\npd.DataFrame({'population': population,\n              'area': area})\n```\n\n### Pandas index\n\nindex como array imutável\n```{python}\nind = pd.Index([2, 3, 5, 7, 11])\nind\n\n# funciona e acede-se como um array\nind[1]\n\n# podem-se obter slices\nind[::2]\n\n# tem muitos atributos iguais\nprint(ind.size, ind.shape, ind.ndim, ind.dtype)\n```\n\npor ser imutável\n```{python}\n#| eval: false\n\n\n# mas é imutável, i.e. não pode ser alterado\n# pelos meios habituais, por isso isto não funciona\nind[1] = 0\n```\n\nO Index também pode ser visto como um set ordenado\n```{python}\nindA = pd.Index([1, 3, 5, 7, 9])\nindB = pd.Index([2, 3, 5, 7, 11])\n\n# interseção de conjuntos\nindA.intersection(indB)\n\n# união de conjuntos\nindA.union(indB)\n\n# diferença entre conjuntos\nindA.symmetric_difference(indB)\n```\n\n### Seleção de dados\n```{python}\ndata = pd.Series([0.25, 0.5, 0.75, 1.0],\n                 index=['a', 'b', 'c', 'd'])\ndata\n\ndata['b']\n\n# verifica se tem esta chave (key)\n'a' in data\n\n# acede a todas as chaves (keys)\ndata.keys()\n\n# acede aos pares\ndata.items()\n\n# acede a todos os valores (items)\nlist(data.items())\n\n```\n\n```{python}\n# expande a series acrescentando um elemento\ndata['e'] = 1.25\ndata\n\n# altera a série mapeando a key b para 0.48 em vez de 0.5\ndata['b'] = 0.48\ndata\n\n# slicing com index explicito\ndata['a':'c']\n\n# slicing com index implicito\ndata[0:2]\n\n# masking \ndata[(data > 0.3) & (data < 0.8)]\n\n# fancy indexing\ndata[['a', 'e']]\n```\n\n### Indexers: loc (explícito) e iloc (implícito)\n```{python}\ndata = pd.Series(['a', 'b', 'c'], index=[1, 3, 5])\ndata\n\n# indice explicito \ndata.loc[1]\n\n# indice explicito \ndata.loc[1:3]\n\n# indice implicito\ndata.iloc[1]\n\n# indice implicito \ndata.iloc[1:3]\n```\n\n### DataFrames\n```{python}\npop = pd.Series({'Lisboa': 544325,'Sintra': 385989, 'Vila Nova de Gaia': 304233,\n                   'Porto': 231834, 'Cascais': 214239, 'Loures': 201349,\n                   'Braga': 193324, 'Almada': 177943})\n\narea = pd.Series({'Lisboa': 100.1,'Sintra': 23.8, 'Vila Nova de Gaia': 56.3,\n                   'Porto': 41.4, 'Cascais': 97.1, 'Loures': 11.8,\n                   'Braga': 41, 'Almada': 14.7})\n\ndata = pd.DataFrame({'area':area, 'pop':pop})\ndata\n```\n\ntransformar os dados\n```{python}\n# criar coluna\ndata['dens'] = data['pop'] / data['area'] \ndata\n\n# ver os dados como num array 2D\ndata.values\n\n# transposicao para trocar linhas com colunas\ndata.T\n\n```\n\naceder aos dados\n```{python}\n# aceder a linha\ndata.values[0]\n\n# aceder a coluna \ndata['area']\n\n# aceder usando os indices implicitos inteiros\n# as primeiras 3 linhas, 0, 1 e 2\n# as primeiras 2 colunas 0 e 1\ndata.iloc[:3, :2]\n\n# aceder àos mesmos dados que anteriormente\n# agora usando os indices explicitos \ndata.loc[:'Vila Nova de Gaia', :'pop']\n\ndata.loc[data.dens > 10000, ['pop', 'dens']]\n\ndata.loc[data['dens'] > 10000, ['pop', 'dens']]\n\ndata.iloc[0, 2] = 5000\ndata\n```\n\n### Operações no Pandas\n\n`np.random.default_rng(42)` cria uma instância da classe gerador do módulo numpy.random module. Este gerador baseado no algoritmo PCG64 é um gerador de números pseudo-random que na realidade é determinado pelo valor inicial da seed, neste caso 42.\n\n```{python}\n# criação de Series com números aleatórios \n# entre 0 e 10 (exclusive) e 4 linhas\n# a seed está fixa a 42\nrng = np.random.default_rng(42)\nser = pd.Series(rng.integers(0, 10, 4))\nser\n\n# a função unária preserva os indices\nnp.exp(ser)\n\n# criação de dataFrame com números aleatórios entre\n# 0 e 10 (exclusive) e 3 linhas e 4 colunas\ndf = pd.DataFrame(rng.integers(0, 10, (3, 4)),\n                  columns=['A', 'B', 'C', 'D'])\ndf\n\n# a função unária preserva os indices\nnp.sin(df * np.pi / 4)\n```\n\nNas operações binárias como a soma e a multiplicação o Pandas alinha os indices ao passar os objectos para as ufunc.\nNos items para os quais não há uma entrada é colocado o valor NaN, \"Not a Number\" que é como o Pandas marca valores em falta (missing data)\n```{python}\npop_u = pd.Series({'Lisboa': 544325,'Sintra': 385989, 'Vila Nova de Gaia': 304233}, name='pop')\n\narea_u = pd.Series({'Sintra': 23.8, 'Vila Nova de Gaia': 56.3, 'Porto': 41.4}, name='area')\n\npop_u / area_u\n\narea.index.union(pop.index)\n\n```\n\n```{python}\n# se os indices forem numéricos ficam ordenados\nA = pd.Series([2, 4, 6], index=[0, 1, 2])\nB = pd.Series([1, 3, 5], index=[1, 2, 3])\nA + B\n\n# existem várias hipóteses para lidar com missing values\n# adiciona as series mas sunstitui nan por zero\nA.add(B, fill_value=0)\n\nA = pd.DataFrame(rng.integers(0, 20, (2, 2)),\n                 columns=['a', 'b'])\nA\n\nB = pd.DataFrame(rng.integers(0, 10, (3, 3)),\n                 columns=['b', 'a', 'c'])\nB\n\n# exemplo de alinhamento de indices nas DataFrames\nA + B\n\nA.values.mean()\n\n# outra forma de lidar com missing values\nA.add(B, fill_value=A.values.mean())\n\n```\n\n**Ufuncs**: Operações entre DataFrames e Series\n```{python}\nA = rng.integers(10, size=(3, 4))\nA\n\n# subtrai a todas as linhas a primeira\nA - A[0]\n\n# igual ao exemplo anterior mas usando indices explicitos\ndf = pd.DataFrame(A, columns=['Q', 'R', 'S', 'T'])\ndf - df.iloc[0]\n\n# Subtrair uma coluna em vez de uma linha\n# não esquecer de indicar axis = 0\ndf.subtract(df['R'], axis=0)\n\n# vai buscar a linha de indice 2 e as colunas (todas) com step 2\nprint(df.head())\nmeialinha = df.iloc[1, ::2]\nmeialinha\n\n# alinha os indices antes da operação\n# por isso só vai subtrair nas colunas Q e S\ndf - meialinha\n```\n\n### Missing values\n\nO tipo None do Python também pode ser usado para marcar missing values, mas não suporta operações aritméticas. Assim o uso do nan é mais vantajoso.\n```{python}\nvals1 = np.array([1, None, 2, 3])\nvals1\n```\n\nnão conseguimos sumar\n```{python}\n#| eval: false\n\nvals1.sum()\n```\n\ncom `nan` não dá erro\n```{python}\n# criação de um array com nan a marcar missing values\nvals2 = np.array([1, np.nan, 3, 4]) \nvals2\n\nprint(1 + np.nan)\nprint(0 * np.nan)\nprint(vals2.sum(), vals2.min(), vals2.max())\n```\n\nO Pandas converte None em nan\n```{python}\npd.Series([1, np.nan, 2, None])\n```\n\nTodos os tipos começados por maiuscula como Int32 podem ser nullable e por isso receber NaN, None ou NA\n```{python}\npd.Series([1, np.nan, 2, None, pd.NA], dtype='Int32')\n```\n\n```{python}\ndata = pd.Series([1, np.nan, 'hello', None])\ndata\n\ndata.isnull()\n\ndata.isna()\n\ndata.notnull()\n\ndata[data.notnull()]\n\ndata.dropna()\n```\n\n```{python}\ndf = pd.DataFrame([[1,      np.nan, 2],\n                   [2,      3,      5],\n                   [np.nan, 4,      6]])\ndf\n\n# remove registos com missing values\ndf.dropna()\n```\n\n```{python}\ndf = pd.DataFrame([[1,      np.nan, 2],\n                   [2,      3,      5],\n                   [np.nan, 4,      6]])\ndf\n\n# remove colunas indicando axis = 1\n# também se pode indicar axis = columns' em vez de 1\ndf.dropna(axis = 1)\n```\n\n```{python}\ndf.loc[:,3] = np.nan\ndf\n\n# excluir aopenas quando todos são nulos\ndf.dropna(axis='columns', how='all')\n\ndf.fillna(0)\n# podemos fazer forward fill\ndf.ffill()\n# backward fill\ndf.bfill()\n# Ou amobos\ndf.bfill().ffill()\n\n```\n\nestas experiências não alteram mesmo a DataFrame se não usarmos o parâmetro inplace\n```{python}\ndf.dropna(axis='columns', how='all', inplace = True)\n\ndf.ffill(inplace = True)\ndf\n```\n\n```{python}\ndf.isna()\n\n# proposta testa por partes a expressão\n# estamos a examinar só a 2ª coluna\ndf.iloc[:,1].isna().sum()\n\ndf.iloc[:,1].fillna(df.iloc[:,1].mean())\n\ndf.head()\n\ndf.describe()\n\ndf.info()\n```\n\nquando estamos a examinar uma coluna tb pode ser útil saber quantos valores unicos tem\n```{python}\n# porque é que usamos o len\n# e não o .sum()\nlen(df.iloc[:,0].unique())\n\nsum(df.iloc[:,0].unique())\n\ndf.iloc[:,0].unique() \n\nvalor, contador = np.unique(df.iloc[:,2], return_counts = True)\nprint(valor)\nprint(contador)\n\nfor valor, contador in zip(valor, contador):\n    print(f\"{valor} aparece {contador} vezes\")\n```\n\n\n```{python}\n# a função zip transforma 2 iteráveis num único iterável\n# em que cada elemento é um par\ncities = ['Elvas', 'Evora', 'Estremoz']\npop = [21750, 81127, 12750]\n \nnew_dict = {cities: pop for cities, pop in zip(cities, pop)}\nprint(new_dict)\n```\n\n### exemplos extra formação\n\n```{python}\nimport pandas as pd\nimport altair as alt\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n```\n\n```{python}\npenguins = pd.read_csv(\"https://pos.it/palmer-penguins-github-csv\")\n```\n\n\n```{python}\n\npenguins.groupby(\"species\").size().reset_index(name = \"count\")\n```\n```{python}\ncolors = [\"#FF8C00\", \"#A020F0\", \"#008B8B\"]\nsns.set_palette(colors, n_colors = 3)\n```\n\n```{python}\n\npenguins[\"bill_ratio\"] = (\n   penguins[\"bill_length_mm\"] / penguins[\"bill_depth_mm\"] \n)\nsns.displot(penguins, \n            x = \"bill_ratio\", \n            hue = \"species\", \n            kind = \"kde\", fill = True, aspect = 2, height = 3)\nplt.show()\n```\n\n```{python}\ndef collatz(num):\n    if num % 2 == 0:\n        return num // 2\n    else:\n        return 3 * num + 1\n\nnumber = 5\n\nwhile number != 1:\n    number = collatz(int(number))\n    print(number)\n```\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["epub.css"],"output-file":"200-mod2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"theme":{"light":"flatly","dark":"solar"}},"extensions":{"book":{"multiFile":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","toc":true,"css":["epub.css"],"output-file":"200-mod2.epub"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente"},"metadata":{"bibliography":["references.bib"],"lang":"pt","date":"2024-03-31"},"extensions":{"book":{"selfContainedOutput":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":true,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":"H","fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":{"text":"\\usepackage{fvextra}\n\\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n\\areaset[0.50in]{4.5in}{8in}\n"},"include-before-body":{"text":"\\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n   showspaces = false,\n   showtabs = false,\n   breaksymbolleft={},\n   breaklines\n   % Note: setting commandchars=\\\\\\{\\} here will cause an error \n}  \n"},"output-file":"200-mod2.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrbook","classoption":["paper=6in:9in","pagesize=pdftex","headinclude=on","footinclude=on","12pt"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","epub","pdf"]}