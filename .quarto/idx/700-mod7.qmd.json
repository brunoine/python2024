{"title":"Programming Techniques (Advanced)","markdown":{"headingText":"Programming Techniques (Advanced)","containsRefs":false,"markdown":"\n::: {.callout-tip}\n## Conteúdos\n\nConceitos de *Classe*, Programação recursiva, *RegExp*.\n\n:::\n\n## Classes  \n\n### Herança\n\n![](images\\classe_heranca.png)\nClasses são modelos para criar objetos. A herança é um mecanismo que permite a uma classe herdar atributos e métodos de outra classe.\n\n```{python}\nclass pai:\n  # código do pai\n  pass\n\nclass filho(pai):\n  # código do filho\n  pass\n```\n\n\n\n+ Herança simples\n\n```{python}\nclass Pessoa(object):\n\n  def __init__(self, nome):\n    self._nome = nome\n\n  @property\n  def nome(self):\n    return self._nome\n\n  @nome.setter\n  def nome(self, novo_nome):\n    self._nome = novo_nome\n```\n\n```{python}\nfrom dataclasses import dataclass\n\n@dataclass\nclass Empregado(Pessoa):\n  num_funcionario: int\n\n  def __init__(self, nome, num_funcionario):\n     Pessoa.__init__(self, nome)\n     self.num_funcionario = num_funcionario\n\n    # ou\n    #super().__init__(nome) # construtor da classe pai\n```\n\n```{python}\ncidadao = Pessoa(\"Carla\")\n\nfuncionario = Empregado(\"Pedro\", 950)\n\nprint(f'A {cidadao.nome} é uma Pessoa')\n\nprint(f'O {funcionario.nome} é um Funcionário com número de funcionário {funcionario.num_funcionario}.')\n\n```\n\n\n+ Herança múltipla\n\n```{python}\nclass Aviao:\n  def sabe_voar(self):\n    print(\"Sei voar\")\n\nclass Barco:\n  def sabe_navegar(self):\n    print(\"Sei navegar\")\n\nclass Hidroviao(Aviao, Barco):\n  pass\n\n_ = Hidroviao()\n_.sabe_navegar()\n_.sabe_voar()\n```\n\nProblema Diamond\n\n```{python}\nclass A:\n\n   def display(self):\n       print(\"Class A\")\n\nclass X(A):\n\n   def display(self):\n       print(\"Class X\")\n\nclass Y(A):\n\n   def display(self):\n       print(\"Class Y\")\n\nclass Z(X, Y):\n   pass\n\nobj = Z()\nobj.display()\n```\n\n```{python}\n# @title Saber a MRO de uma classe\n\n#print(Z.mro())\nprint(Z.__mro__)\n```\n\n+ Herança multi-nível\n\n```{python}\nfrom dataclasses import dataclass\n\n@dataclass\nclass Pessoa:\n  nome: str\n\n@dataclass\nclass Atleta (Pessoa):\n  clube: str\n\n@dataclass\nclass Futebolista(Atleta):\n  posicao: str\n\npele = Futebolista(\"Pelé\", \"Santos\", \"Avançado\")\nprint(pele)\n```\nEsconder atributos\n\n```{python}\nclass Utilizador:\n  def __init__(self, meu_username, meu_password):\n    self._username = meu_username # protected: começa por _ (unerscore)\n    self.__password = meu_password # private: começa por __ (duplo underscore)\n    self.__gerar_id()\n\n  def __gerar_id(self):  # private\n    from random import randint\n    self.id = randint(1, 99999)\n\nclass Cliente(Utilizador):\n  def __init__(self, cliente_username, cliente_password, data_de_entrada):\n    self.data_registo = data_de_entrada # public\n    Utilizador.__init__(self,  cliente_username, cliente_password)\n\ncliente1 = Cliente('telma', 'xyzpass', '2020-10-16')\nprint(cliente1._username)\nprint(cliente1.data_registo)\n#print(cliente1.__password)\n#cliente1.__gerar_id()\nprint(cliente1.id)\n```\n\n```{python}\nprint(cliente1._Utilizador__password) # privado mas com transparẽncia\n\nprint(cliente1.id)\ncliente1._Utilizador__gerar_id()  # privado mas com transparẽncia\nprint(cliente1.id)\n```\n\n+ Herança híbrida: quando se misturam vários tipos de herança;\n+ Hernça hierárquica: várias classes herdam duma classe comum.\n\n### Polimorfismo\n\n![](images/classe_polimorf.png)\n\n#### Funções polimórficas\n\n```{python}\n# @title Python built-in\n\n# len() para string\nprint(len(\"palavra\"))\n\n# len() para lista\nprint(len([10, 20, 30]))\n```\n\n```{python}\n# @title User Defined Function\ndef soma(a,b,c=0):\n  return a+b+c\n\nprint(soma(2,3))\nprint(soma(2,3,4))\n```\n\n```{python}\nfrom dataclasses import dataclass\n\n@dataclass\nclass Poligono:\n  nome: str\n  cor: str\n\nclass Triangulo(Poligono):\n  def __init__(self, cor_do_triangulo):\n    super().__init__(\"triangulo\",cor_do_triangulo)\n\n  def desenha(self):\n    import matplotlib.pyplot as plt\n\n    # Draw a triangle\n    plt.plot([0, 1], [0, 0], self.cor)\n    plt.plot([1, 0.5], [0, 0.5], self.cor)\n    plt.plot([0.5, 0], [0.5, 0], self.cor)\n    plt.axis('off')\n    plt.show()\n\nclass Rectangulo(Poligono):\n  def __init__(self,cor_do_rectangulo):\n    super().__init__( \"rectangulo\",cor_do_rectangulo)\n\n  def desenha(self):\n    import matplotlib.pyplot as plt\n    # Draw a rectangle\n    plt.plot([4, 6], [0, 0], self.cor)\n    plt.plot([6, 6], [0, 1], self.cor)\n    plt.plot([6, 4], [1, 1], self.cor)\n    plt.plot([4, 4], [1, 0], self.cor)\n\n    plt.axis('off')\n    plt.show()\n\n```\n\n```{python}\nt = Triangulo('b')\nr = Rectangulo('g')\n\n# 'b' as blue\n# 'g' as green\n# 'r' as red\n# 'c' as cyan\n# 'm' as magenta\n# 'y' as yellow\n# 'k' as black\n# 'w' as white\n\nfor poligono in (t,r):\n  print(poligono.nome)\n  poligono.desenha()\n```\n\n\n#### Exercícios\n\n```{python}\n# @title Exercício (copy/paste)\n\nclass Classe1():\n  s = \"Bom\"\n\nclass Classe2:\n  s = \"trabalho\"\n\nclass Classe3(Classe1, Classe2):\n\n  def __init__(self):\n    # imprime Bom trabalho\n    print(Classe1.s, Classe2.s)\n    \n_ = Classe3()\n```\nna herança multipla uma classe que herda  mais do que uma classe\n\n## Sequências e Conjuntos\n\n![](images\\tipos_dados.png)\n\n### Tuplos\n\ncoleção ordenada; imutável; heterogénea; indexada a zero [0]; permite duplicados.\n\n```{python}\nestacoes = (\"Primavera\", \"Verão\", \"Outono\", \"Inverno\")\n\n# outra forma, a partir do Python 3.11\nvalues : tuple[int | str, ...] = (1,2,4,\"palavra\")\n# túplo que aceita string ou int e pode ter vários de cada\n```\n\nsó com um elemento  \n```{python}\ntuplo = (\"sozinho\",) # acaba com uma vírgula\nprint(type(tuplo))\n\n#NOT a tuple\nnao_tuplo = (\"só\")\nprint(type(nao_tuplo))\n```\n\n\nusando um construtor  \n```{python}\nt = tuple([\"baixo\", \"médio\", \"alto\"])\nprint(t)\n\n```\n\naceder a um elemento do tuplo  \n```{python}\nt = tuple((\"baixo\", \"médio\", \"alto\"))\n\nprint(t[1])\n\nprint(t[-1])\n```\n\n\noperações com tuplos\n```{python}\n# @title Concatenar\nt1 = (\"a\", \"b\")\nt2 = (1, 2)\nt3 = t1 + t2\nt3\n\n# @title Nesting\nt1 = (\"a\", \"b\")\nt2 = (1, 2)\nt3 = (t1, t2)\nt3\n\n# @title Repetição\nt1 = (\"a\", \"b\")\nt2 = t1 * 3\nt2\n\n# @title Slicing\nt1 = (0 ,1, 2, 3)\n\nprint(t1[1:])\n\nprint(t1[::-1])\n\nprint(t1[2:4])\n\n# @title Número de elemtentos\nt1 = (\"a\", \"c\", \"c\")\nlen(t1)\n\n# @title Apagar túplo\nt1 = (1,)\ndel t1\n\n#### Converter Lista em Túplo\nlista = [1, 2, 3, 4]\ntuplo = tuple(lista)\ntuplo\n\n# @title Converter String em Túplo\ns = \"abcd\"\nt = tuple(s)\nt\n\n```\n\niterar um tuplo  \n```{python}\nt1 = (\"a\", 1, True, \"b\")\n\nfor i in t1:\n  print(type(i))\n```\n\n### Sets\n\ncoleção não ordenada; mutável; sem duplicados; pode ser iterada; sintaxe: entre chavetas { } e separado por vírgulas.\n\n\n```{python}\nconjunto = {\"tangerina\", \"papaia\", \"melão\"}\n\nconjunto = set([\"tangerina\", \"papaia\", \"melão\"])\n\nconjunto\n```\n\n\n```{python}\n# @title Conjunto vazio\nset1 = set()\nprint(\"Conjunto vazio\")\nprint(set1)\n\n# @title Set a partir de uma String\nset1 = set(\"palavra\")\nprint(set1)\n\noutra_string = \"outra palavra\"\nset1 = set(outra_string)\nprint(set1)\n\n# @title Set a partir de uma lista\nset1 = set([\"a\", \"b\", \"c\"])\nprint(set1)\n\n# @title Set a partir de um tuplo\nt = (\"um\",\"dois\",\"três\")\nprint(set(t))\n\n# @title Set a partir de um dicionário\nd={\"Sim\":\"yes\", \"Não\":\"No\", \"Talvez\":\"Maybe\"}\nprint(set(d))\n\n```\n\nadicionar um elemento a um conjunto  \n```{python}\ns = {1, 2}\ns.add(3)\ns\n```\n\nadicionar vários elementos a um conjunto  \n```{python}\ns = {1, 2}\nnovos_elementos=[3, 4, 5] # não tem de ser uma lista\ns.update(novos_elementos)\ns\n```\n\naceder a elementos  \n\ncomo não há ordem não se pode aceder a elementos de um conjunto  via indice\n\n```{python}\nset1 = set([\"a\", \"b\", \"c\"])\n\nfor elemento in set1:\n\tprint(elemento, end=\" \")\n```\n\nverificar se um elemento existe num conjunto  \n```{python}\nset1 = set([\"a\", \"b\", \"c\"])\nprint(\"b\" in set1)\n\n```\n\nremover um elemento de um conjunto  \n```{python}\ns = {1, 2, 3}\n\ns.remove(2)\n\n#s.remove(4) # daria erro\ns.discard(4) # não dá se o elemento não existir\n\ns\n\n```\n\nremover todos os elementos de um conjunto  \n```{python}\ns = {9, 8, 7}\ns.clear()\ns\n```\nremover sem saber o quê  \n```{python}\ns = {2, 1, 3, 4, 5}\nremovi = s.pop()\n\nprint(removi)\ns\n```\nFrozensets: conjunto imutável\n\n```{python}\nfrz=frozenset({1, 2, 3})\nfrz\n```\n\nconverter em set  (type casting)\n```{python}\n# @title list\nlista = [1, 2, 3, 3, 4, 5, 5, 6, 2]\nconjunto = set(lista)\nconjunto\n\n```\n\n```{python}\n# @title string\ns = \"Palavra\"\nconjunto = set(s)\nconjunto\n\n# @title dictionary\nd = {1: \"Um\", 2: \"Dois\", 3: \"Três\"}\nconjunto = set(d)\nconjunto\n\n```\n\n\nOperações de conjuntos  \n```{python}\n# @title Unir\ns1 = {1, 2}\ns2 = {3, 4, 5}\ns3 = s1.union(s2)\ns3\n\n# @title Intersecção\ns1 = {1, 2, 3, 4, 5}\ns2 = {4, 5, 6, 7, 8}\ns3 = s1.intersection(s2)\ns3\n\n# @title Diferença\ns1 = {1, 2, 3, 4, 5}\ns2 = {4, 5, 6, 7, 8}\n\n# pertence a s1 e não pertence a s2\ns3 = s1.difference(s2)\ns3\n\n# @title diferença simétrica\ns1 = {1, 2, 3, 4, 5}\ns2 = {4, 5, 6, 7, 8}\n\n# elementos dos dois conjuntos que não são comuns\ns3 = s1.symmetric_difference(s2)\ns3\n\n# @title Verifica se é subconjunto\ns1 = {1, 2, 3, 4, 5}\ns2 = {2, 3, 4}\nprint(s2.issubset(s1))\n\n# @title Verifica se é um superset\ns1 = {1, 2, 4, 5}\ns2 = {2, 3, 4}\nprint(s1.issuperset(s2))\n```\n\n## *module* `collections`\n\n+ Counters\n+ OrderedDict\n+ Defaultdict\n+ ChainMap\n+ NamedTuple\n+ DeQue\n+ UserDict\n+ UserList\n+ UserString\n\n```{python}\n# @title Criar counters\nfrom collections import Counter\n\n# sequencia de items\nprint(Counter(['B','B','A','B','C','A','B','B','A','C']))\n\n# dictionary\nprint(Counter({'A':3, 'B':5, 'C':2}))\n\n# keyword arguments\nprint(Counter(A=3, B=5, C=2))\n\n\n# @title Actualizar counters\ncoun = Counter()\n\ncoun.update([1, 2, 3, 1, 2, 1, 1, 2])\nprint(coun)\n\ncoun.update([1, 2, 4])\nprint(coun)\n\n# @title Subtrair counters\n# Python program to demonstrate that counts in\n# Counter can be 0 and negative\nc1 = Counter(A=4, B=3, C=10, J=40)\nc2 = Counter(A=10, B=3, C=4, D=5)\n\nc1.subtract(c2)\nprint(c1)\n\n# @title Distinct count numa lista\nz = ['chá', 'café', 'chá', 'vinho', 'água', 'chá', 'café']\n# Quantos elementos únicos existem na lista, e quantas unidade e cada elemento?\nprint(Counter(z))\n\n\n# @title imprimir valores do counter\nc = Counter('abracadabra')\nprint(c.keys())\nprint(c.values())\nprint(c.items())\n\n```\n\norderedDict subclasse de dicionário que mantém a ordem de inserção dos elementos  \n```{python}\nfrom collections import OrderedDict\n\nprint(\"Dicionário:\\n\")\nd = {}\nd['a'] = 1\nd['b'] = 2\nd['c'] = 3\nd['d'] = 4\n\n# remover e inserir\nd.pop('a')\nd['a'] = 1\n\n# alterar o valor\nd['c'] = 5\n\nfor key, value in d.items():\n\tprint(key, value)\n\nprint(\"\\nOrdered Dict:\\n\")\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\nod['d'] = 4\n\n# remover e inserir\nod.pop('a')\nod['a'] = 1\n\n# alterar o valor\nod['c'] = 5\n\nfor key, value in od.items():\n\tprint(key, value)\n```\n\n\ndefaultDict: subclasse de dicionário que permite definir um valor padrão para chaves inexistentes  \n```{python}\nfrom collections import defaultdict\n\ndef default_e_5():\n\treturn 5\n\nd = defaultdict(int)\n\n# O valor por omissão (default value) é 0\nprint(d[15])\n\nd2 = defaultdict(default_e_5)\nprint(d2[15])\n\n\nd = defaultdict(int)\ndicionario_normal={}\n\nL = [1, 2, 3, 4, 2, 4, 1, 2]\n\nfor i in L:\n\n\t# O valor por omissão (default value) é 0\n\t# por isso não é necessário inserir a chave primeiro\n\td[i*2] += 1\n\t#dicionario_normal[i*2] += 1\n\nprint(d)\n\n# outro exmplo\nd = defaultdict(list)\n\nfor i in range(5):\n\td[i].append(i)\n\nprint(d)\n\n```\n\nchainMap: permite juntar vários dicionários numa única estrutura e devolve uma lista de dicionários  \n```{python}\nfrom collections import ChainMap\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}\nd3 = {'e': 5, 'f': 6}\n\n# Defining the chainmap\njuntos = ChainMap(d1, d2, d3)\n\nprint(juntos)\n\nprint(juntos['a'], juntos['f'])\n```\n\nnamedTuple: permite criar tuplos nomeados. Pode ser visto como uma formaleve de criar uma lista  \n```{python}\nfrom collections import namedtuple\n\n# namedtuple()\nEstudante = namedtuple('Estudante', ['nome', 'curso', 'data_nascimento'])\n\n# Adicionar valor\ns = Estudante('Mónica', 'Filosofia', '25-12-1997')\n\n# Aceder via index\nprint(f\"O curso é {s[1]}\")\n\n# Aceder via nome\nprint(f\"O nome é {s.nome} \")\n\nprint(s)\n```\n\ndeQue: é uma lista de dupla extremidade (double-ended queue)  \n\n```{python}\nfrom collections import deque\n\ndq = deque([3, 4, 5])\n\nprint(dq)\n\ndq.append(6)\nprint(dq)\n\ndq.appendleft(9)\nprint(dq)\n\ndq.pop()\nprint(dq)\n\ndq.popleft()\nprint(dq)\n\n```\n\n\nuserDict, userList, userString: são subclasses de dicionário, lista e string, respetivamente com funcionalidades especificas  \n```{python}\n# title userDict\nfrom collections import UserDict\n\n# Dicionário que não permite apagar elementos\nclass MeuDict(UserDict):\n\n\t# Função para impedir apagar do dicionário\n\tdef __del__(self):\n\t\traise RuntimeError(\"Não é permitido apagar (del)\")\n\n\t# Função para impedir pop() do dicionário\n\tdef pop(self, s = None):\n\t\traise RuntimeError(\"Não é permitido apagar (pop)\")\n\n\t# Função para impedir popitem() do dicionário\n\tdef popitem(self, s = None):\n\t\traise RuntimeError(\"Não é permitido apagar (popitem)\")\n\nd = MeuDict({'a':1, 'b': 2, 'c': 3})\n\n#d.pop(1)\n\n# @title UserList\n\nfrom collections import UserList\n\n# Lista que não permite apagar\nclass MinhaLista(UserList):\n\n\t# Função para impedir apagar da lista\n\tdef remove(self, s = None):\n\t\traise RuntimeError(\"Não é permitido apagar (remove)\")\n\n\t# Função para impedir apagar pop() da lista\n\tdef pop(self, s = None):\n\t\traise RuntimeError(\"Não é permitido apagar (pop)\")\n\nL = MinhaLista([1, 2, 3, 4])\nL.append(5)\nprint(L)\n\n#L.remove()\n\n# @title UserString\nfrom collections import UserString\n\n# String mutável\nclass MutableString(UserString):\n\n\t# Função para adicionar a uma stirng\n\tdef append(self, s):\n\t\tself.data += s\n\n\t# Função para remover de uma string\n\tdef remove(self, s):\n\t\tself.data = self.data.replace(s, \"\")\n\n\ns1 = MutableString(\"Palavra\")\nprint(\"String original:\", s1.data)\n\n# Adicionar\ns1.append(\"s\")\nprint(\"Após adicionar:\", s1.data)\n\n# Remover\ns1.remove(\"vra\")\nprint(\"Após remover:\", s1.data)\n```\n\n## Programação Recursiva\n\num processo que se chama a si mesmo directa ou indirectamente para computar o seu resultado.  \n\n```{python}\n# @title Successor\ndef suc(n):\n  if n == 0:\n    return 1\n  else:\n    return 1 + suc(n-1)\n\nprint(suc(4))\n\n# @title Factorial\ndef factorial(num):\n  if num == 1:\n    return num\n  else:\n    return num * factorial(num - 1)\n\nprint(factorial(4))\n```\n### Exercícios\n\n```{python}\n#| eval: false\n\n# # fazer função get_comuns que recebe 3 listas e devolve uma lista com os elementos comuns às 3 listas\n# def get_comuns(l1, l2, l3[]):\n#   s1 = set(l1)\n#   s2 = set(l2)\n#   \n#   comuns = s1.intersection(s2, s3)\n#   \n#   if len(3)>0:\n#     s3 = set(l3)\n#     comuns = comuns.intersection(s3)\n#   \n#   return list(comuns)\n  \n```\n\n```{python}\n# fazer função um_to_n que recebe um número n e devolve a sequencia de 1 a n\ndef um_to_n(n):\n  if n == 1:\n    return [1]\n  else:\n    return um_to_n(n-1) + [n]\n\num_to_n(4)\n```\n## Expressões Regulares\n\n```{python}\nimport re\ns=\"Um grande dia para falar de expressões regulares\"\n\nmatch=re.search(r\"falar\", s)\n\nprint(match.start(), match.end())\n```\n\n  meta caracteres:\n\n- `\\` - Caracter de escape, remove o a funcionalidade especial do carcater que está a seguir\n\n- `[]` - Representa uma classe de caracteres\n\n- `^` - Faz match com o início\n\n- `$` - Faz match com o fim\n\n- `.` - Faz match com qualquer caracter excepto o \"newline\"\n\n- `|` - Significa \"OR\". Faz match com qualquer dos caracteres separados pelo símbolo\n\n- `?` - Faz match com zero ou mais ocorrências\n\n- `*` - Faz match com qualquer número de ocorrências (incluindo 0 ocorrências)\n\n- `+` - Uma ou mais ocorrências\n\n- `{}` - Indica o número de ocorrências que a expressão imediatamente anterior tem de fazer match\n\n- `()` - Representa um grupo da expressão regular\n\n\nOperações\n\n```{python}\nimport re\n\nprint(re.search(r\"9+\",\"289908\")) # produra os 9's\nprint(re.search(r\"\\d{3}\",\"abc1234de\"))\n\n# primeiro conjunto de letras\nprint(re.match(r\"\\w+\",\"são 13 horas?\")) # \nx=re.match(r\"\\w+\",\"são 13 horas?\")\n\n# primeiro simbolo que é não letra\nprint(re.search(r\"\\W\",\"São 13 horas?\"))\n\nprint(re.search(r\"x*e+\",\"abxcdxxxefxghxx\")) # x seguido de zero ou mais e seguido de um ou mais e\n\nprint(re.findall(r\"xx+\",\"abxcdxxxefxghxx\")) # x seguido de um ou mais x\n\nprint(re.search(r\"[ine]\",\"ana\")) # procura i, n ou e\n\n# @title group\nm = re.match(r\"(\\w+) (\\w+)\", \"Instituto Nacional de Estatística\")\nm.group(0)       # O match completo\n#'Instituto Nacional'\n\nm.group(1)       # O 1º subgroupo entre parentises.\n#'Instituto'\n\nm.group(2)       # O 2º subgroupo entre parentises\n#'Nacional'\n\nm.group(2, 1)    # Vários argumentos, devolve-nos um tuplo\n#('Nacional','Instituto')\n#m.groups()\n\n# @title group() e groups()\nresultado = (re.search(r\"(?:AB)\",\"ACABC\"))\nprint(resultado)\nprint(resultado.groups()) # todos os grupos a partir do grupo 1\nprint(resultado.group())\n#print(resultado.group(0))\n\nresultado = re.search(r\"(\\w*), (\\D*), (\\w*)\",\"espinafres, 12, combóio, ?, falange\")\nprint(resultado.groups())\nprint(resultado.group())\n\nresultado = (re.search(r\"(?:AB)\",\"acabc\"))\nprint(resultado)\n\nresultado = (re.search(r\"(?:AB)\",\"acabc\", flags=re.IGNORECASE))\nprint(resultado)\n\nresultado = (re.search(r\"(?i:AB)\",\"acabc\"))\nprint(resultado)\n\npartes = re.split(r'\\.', '127.0.0.1', maxsplit=5)\nprint(partes)\n\n# @title validar\nvalid = re.compile(r\"^[a2-9tjqk]{5}$\")\n\nmatch = valid.match(\"akt5q\")  # Válido\n\nprint(match.group())\n\nmatch = valid.match(\"akt5e\") # Inválido\n\nmatch = valid.match(\"akt\") # Inválido\n\nmatch = valid.match(\"727ak\") # Válido\n\nprint(match.group())\n\n# @title backreferences\npair = re.compile(r\".*(.).*\\1\")\n\nprint(pair.match(\"717ak\"))\n\nprint(pair.match(\"717ak\").group())\n\nprint(pair.match(\"717ak\").group(1))\n\n# @title gropudict (e named references)\nm = re.match(r\"(?P<codigo_postal>\\d{4}-\\d{3}) (?P<localidade>\\w+)\", \"4000-064 PORTO\")\nm.groupdict()\n```\n## Lambda Functions\n\n```{python}\n# função UDF\ndef cubo(y):\n\treturn y*y*y\n\n# função lambda\nlambda_cubo = lambda y: y*y*y\n\nprint(\"usando a UDF:\", cubo(5))\nprint(\"usando a função lambda:\", lambda_cubo(5))\n```\n\n\nem comprehensions  \n```{python}\nmultiplos_de_dez = [lambda arg=x: arg * 10 for x in range(1, 9)]\n\nfor item in multiplos_de_dez:\n    print(item())\n```\n\nem funções breves  \n```{python}\nMax = lambda a, b : a if(a > b) else b\nprint(Max(1, 2))\n\n\n(lambda x: (x+3)*5*x/2)(3)\n```\n\n\nem filtros  \n```{python}\nli = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]\n\nimpares = list(filter(lambda x: (x % 2 != 0), li))\nprint(impares)\n```\n\nem mapeamentos  \n```{python}\nli = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]\n\ndobro = list(map(lambda x: x*2, li))\nprint(dobro)\n```\n\nA função `reduce()` aplica-se a listas e executa a mesma função a cada dois elementos da lista. \naka Função acumuladora   \n```{python}\nfrom functools import reduce\nli = [10, 5, 40]\n\nconcat = reduce(lambda x, y: str(x) + '.' + str(y), li)\nprint(concat)\n\nli = [10, 20, 50]\nsum = reduce((lambda x, y: x + y), li)\nprint(sum)\n\n```\n\nImmediately Invoked Function Execution\n\n```{python}\nresultado = (lambda x: x + 1)(2)\nprint(resultado)\n```\n\n## Excepções\n\n![](images/try_errors.png) \n\n\n```{python}\nx = 2\ny = \"a\"\n\ntry:\n    z = x + y\nexcept TypeError:\n    print(\"Erro: Não pode adicionar int com string\")\nexcept:\n    print(\"Erro: Outro erro\")\nelse:\n    print(z) # não houve excepção\nfinally:\n  print(\"Passa sempre aqui\")\n```\n\ncausar uma excepção  \n```{python}\ntry:\n\traise NameError(\"Olá\") # Raise\nexcept NameError:\n\tprint (\"Ocorreu uma excepção\")\n#\traise # Propagar a excepção para \"cima\"\n\n# @title Excepção genérica\n# x = 4\n# if x<10:\n#   raise Exception(\"uma excepção inventada\")\n\n# @title User defined exception\nclass ValorExcessivo(Exception):\n  pass\n\ntry :\n    x = 2000\n    if (x > 100):\n      raise ValorExcessivo\n\n    print(\"O valor é bom\")\nexcept ValorExcessivo:\n  print (\"O valor é excessívo\")\n```\n\n**boa prática** usar as excepções built-in quando possível\n\n```{python}\ntry:\n  x = 2000\n  if (x > 100):\n    raise ValueError(\"O valor é excessívo\")\n\n  print(\"O valor é bom\")\nexcept ValueError as e:\n  print(e)\n```\nprocurar em [Built-in exceptions](https://docs.python.org/3/library/exceptions.html)\n\n### Exercícios\n\n```{python}\n# com tratamento de excepções implementa uma função que divide  x por y e em caso de zero devolve uma mensagem de erro\ndef divide(x, y):\n  try:\n    return x/y\n  except ZeroDivisionError:\n    return \"Erro: Divisão por zero\"\n```\n\n## Zen of Python\n\n```{python}\nimport this\n```\n[9 Fabulous Python Tricks That Make Your Code More Elegant](https://medium.com/techtofreedom/9-fabulous-python-tricks-that-make-your-code-more-elegant-bf01a6294908)\n\n## Bónus\n\n```{python}\n# @title Evitar nested loops\n\nlist_a = [1, 2020, 70]\nlist_b = [2, 4, 7, 2000]\nlist_c = [3, 70, 7]\n\n# antes\nfor a in list_a:\n    for b in list_b:\n        for c in list_c:\n            if a + b + c == 2077:\n                print(a, b, c)\n                \n# depois\nfrom itertools import product\n\nfor a, b, c in product(list_a, list_b, list_c):\n    if a + b + c == 2077:\n        print(a, b, c)\n\n\n```\n\n```{python}\n# @title Operador Morsa (Walrus Operator)\n\n# antes\nauthor = \"Yang\"\nprint(author)\n\n# depois\nprint(author:=\"Yang\")\n```\n\n```{python}\n# @title Operador trenário\n\n# antes\nif a<b:\n  min = a\nelse:\n  min = b\n\n# depois\nmin = a if a < b else b\n```\n\n```{python}\n# @title usar funções higher-order\n\n# map\nnames = ['maTeMáTiCa', 'iNgLês', 'FísiCa', 'PORTUGUÊS']\nnames = map(str.capitalize, names)\nprint(list(names))\n\n# reduce\nfrom functools import reduce\nlista = ['P', 'y', 't', 'h', 'o', 'n', 2, 0, 2, 3]\nlista_to_str = reduce(lambda x, y: str(x) + str(y), lista)\nprint(lista_to_str)\n```\n\n\n```{python}\n# @title union operator\ncities_us = {'New York City': 'US', 'Los Angeles': 'US'}\ncities_uk = {'London': 'UK', 'Birmingham': 'UK'}\n\ncities = cities_us|cities_uk\nprint(cities)\n\n# ainda melhor (se for o que se pretende!)\ncities_us |= cities_uk\nprint(cities_us)\n```\n\n\n```{python}\n# @title Usar *\nA = [1, 2, 3] # lista\nB = (4, 5, 6) # tuplo\nC = {7, 8, 9} # conjunto\n\nL = [*A, *B, *C]\n\nprint(L)\n```\n\n```{python}\n# magia com *\na, *mid, b = [1, 2, 3, 4, 5, 6] # mid é uma lista com os elementos do meio\nprint(a, mid, b)\n\n```\n\n## chatGPT\n\n### com o *github copilot*\n\n```{python}\n# write a lambda function in Python that receives 3 lists and returns a list with the elements common to the 3 input lists. Also write code to test the function.\nget_commons = lambda l1, l2, l3: list(set(l1) & set(l2) & set(l3))\n\n# test the function\nl1 = [1, 2, 3, 4, 5]\nl2 = [2, 3, 4, 5, 6]\nl3 = [3, 4, 5, 6, 7]\nprint(get_commons(l1, l2, l3))\n\n```\n### Via API\n\n```{python}\n#| eval: false\n\npip install openai\n```\n\n```{python}\n#| eval: false\n\n# @title Chat\nfrom openai import OpenAI, OpenAIError\nfrom google.colab import userdata\n\ntry:\n\n  client = OpenAI(\n      api_key = userdata.get('OPENAI_APIKEY')\n  )\n\n  completion = client.chat.completions.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n      {\"role\": \"system\", \"content\": \"És um poeta e um especialista em estatística. Falas português de Portugal.\"},\n      {\"role\": \"user\", \"content\": \"Compõe um poema com 2 quadras que explique a evolução dos preços do IPC no ano de 2020 em Portugal.\"}\n    ]\n  )\n\n  resposta = completion.choices[0].message\n\n  print(resposta.content)\n\nexcept OpenAIError as e:\n  print(\"erro:\", e)\n\n```\n\n```{python}\n#| eval: false\n\n# @title Assistant\nfrom openai import OpenAI\nclient = OpenAI(\n    api_key = userdata.get('OPENAI_APIKEY')\n)\n\n# 1. Criar o assistente\nassistant = client.beta.assistants.create(\n  name=\"Math Tutor\",\n  instructions=\"És um especialista em estatística e professor de Python. Escreve e executa código para responder às perguntas.\",\n  tools=[{\"type\": \"code_interpreter\"}],\n  #model=\"gpt-4-turbo\", caro\n  model=\"gpt-3.5-turbo\",\n)\n\n# 2. Criar um historico da conversa\nthread = client.beta.threads.create()\n\n# 3. Iniciar a conversação\nmessage = client.beta.threads.messages.create(\n  thread_id=thread.id,\n  role=\"user\",\n  content=\"Como estimar a inflação?\"\n)\n\n# 4. Executar o assistente e aguardar a resposta\nfrom typing_extensions import override\nfrom openai import AssistantEventHandler\n\n# First, we create a EventHandler class to define\n# how we want to handle the events in the response stream.\nclass EventHandler(AssistantEventHandler):\n  @override\n  def on_text_created(self, text) -> None:\n    print(f\"\\nassistente > \", end=\"\", flush=True)\n\n  @override\n  def on_text_delta(self, delta, snapshot):\n    print(delta.value, end=\"\", flush=True)\n\n  def on_tool_call_created(self, tool_call):\n    print(f\"\\nassistente > {tool_call.type}\\n\", flush=True)\n\n  def on_tool_call_delta(self, delta, snapshot):\n    if delta.type == 'code_interpreter':\n      if delta.code_interpreter.input:\n        print(delta.code_interpreter.input, end=\"\", flush=True)\n      if delta.code_interpreter.outputs:\n        print(f\"\\n\\resposta >\", flush=True)\n        for output in delta.code_interpreter.outputs:\n          if output.type == \"logs\":\n            print(f\"\\n{output.logs}\", flush=True)\n\n# Then, we use the `stream` SDK helper\n# with the `EventHandler` class to create the Run\n# and stream the response.\n\nwith client.beta.threads.runs.stream(\n  thread_id=thread.id,\n  assistant_id=assistant.id,\n  instructions=\"Responde como se estivesses a falar com um colega de trabalho que acabou de sair da faculdade.\",\n  event_handler=EventHandler(),\n) as stream:\n  stream.until_done()\n```\n\n\n\n<br>\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["epub.css"],"output-file":"700-mod7.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"theme":{"light":"flatly","dark":"solar"}},"extensions":{"book":{"multiFile":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","toc":true,"css":["epub.css"],"output-file":"700-mod7.epub"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente"},"metadata":{"bibliography":["references.bib"],"lang":"pt","date":"2024-03-31"},"extensions":{"book":{"selfContainedOutput":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":true,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":"H","fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":{"text":"\\usepackage{fvextra}\n\\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n\\areaset[0.50in]{4.5in}{8in}\n"},"include-before-body":{"text":"\\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n   showspaces = false,\n   showtabs = false,\n   breaksymbolleft={},\n   breaklines\n   % Note: setting commandchars=\\\\\\{\\} here will cause an error \n}  \n"},"output-file":"700-mod7.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrbook","classoption":["paper=6in:9in","pagesize=pdftex","headinclude=on","footinclude=on","12pt"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","epub","pdf"]}