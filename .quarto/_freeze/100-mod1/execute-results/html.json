{
  "hash": "e9d91a9eecfc8e65516dbe9c3fc9abc0",
  "result": {
    "markdown": "# Módulo 1\n\n::: {.callout-tip}\n## Conteúdos\n\nIntrodução a conceitos básicos da linguagem de programação *Python*.\n:::\n\n## Código\n\nVamos começar com o *python* em *chunks*\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nprint(\"hello, world!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello, world!\n```\n:::\n:::\n\n\npodemos definir uma função com um input\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef fib(n):\n  a, b = 0, 1\n  while a < n:\n    print(a, end=' ')\n    a, b = b, a+b\n  print()\n  \nfib(1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 \n```\n:::\n:::\n\n\ne criar uma lista que queremos transformar e enumerar\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# python 3: list comprehensions\nfruits = ['Banana', 'Apple', 'Lime']\nloud_fruits = [fruit.upper() for fruit in fruits]\n\nprint(loud_fruits)\n\nlist(enumerate(fruits))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['BANANA', 'APPLE', 'LIME']\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[(0, 'Banana'), (1, 'Apple'), (2, 'Lime')]\n```\n:::\n:::\n\n\ne tentar um `if` `else`\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfechado = True\n\nif fechado:\n  print('porta fechada!')\nelse:\n  print('vamos lá!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nporta fechada!\n```\n:::\n:::\n\n\nOperadores logicos\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nTrue and False\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nTrue or False\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nnot True == False\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nTrue\n```\n:::\n:::\n\n\n## [The Zen of Python](https://peps.python.org/pep-0020/)\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport this\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```\n:::\n:::\n\n\n[Lessons from the Zen of Python](https://www.datacamp.com/blog/lessons-from-the-zen-of-python?utm_source=google&utm_medium=paid_search&utm_campaignid=19589720818&utm_adgroupid=152984010374&utm_device=c&utm_keyword=&utm_matchtype=&utm_network=g&utm_adpostion=&utm_creative=691747307221&utm_targetid=aud-517318241987:dsa-2222697811398&utm_loc_interest_ms=&utm_loc_physical_ms=1011781&utm_content=DSA~blog~Python&utm_campaign=230119_1-sea~dsa~tofu_2-b2c_3-eu_4-prc_5-na_6-na_7-le_8-pdsh-go_9-na_10-na_11-na-feb24&gad_source=1&gclid=CjwKCAjwh4-wBhB3EiwAeJsppGroHdOu1Op9NirjhJ1kjMgm5Oh95bf5VQpcOHRo3B6322TlLc0jUxoCKaQQAvD_BwE)\n\n\n<br>\n\n",
    "supporting": [
      "100-mod1_files"
    ],
    "filters": [],
    "includes": {}
  }
}