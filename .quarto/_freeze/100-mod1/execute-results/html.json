{
  "hash": "9a5c56b4e3775f59a37c23bc9d45d299",
  "result": {
    "markdown": "# Programming Tecnhiques (Basics)\n\n::: {.callout-tip}\n## Conteúdos\n\nIntrodução a conceitos básicos da linguagem de programação *Python*.\n:::\n\n\n## o que é o Python?\n\nlinguagem de programação:\n\n+ interpretada e orientada a objectos (mas permite funções)\n+ aprendizagem rápida e simples\n+ gratuita\n\n**modo interativo** vs modo script\n\n*Iniciar -> Anaconda prompt* (se o *Anaconda* estiver configurado).\n\nmodo interativo vs **modo script**\n\ncriado um *ficheiro.py*, pode ser executado:\n\n`python -u \"c:\\Users\\documents\\ficheiro.py\"`\n\n## Funções básicas\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# imprimir na consola\nprint('olá mundo!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nolá mundo!\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# docstring, funciona como comentário mas não é recomendado\n\n\"\"\"\npermite escrever texto \nem multiplas\nlinhas\n\"\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'\\npermite escrever texto \\nem multiplas\\nlinhas\\n'\n```\n:::\n:::\n\n\nimprimir números e /ou cálculos:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(3+6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n```\n:::\n:::\n\n\npara concatenar texto formatado\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnumero = 4\nprint(f\"O número é: {numero*2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nO número é: 8\n```\n:::\n:::\n\n\nimprimir múltiplas linas\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(\"\"\"\nlinha1\nlinha2\n\"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nlinha1\nlinha2\n\n```\n:::\n:::\n\n\n*raw strings*\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# forçar a imprimir exactamente o que está entre '' \nprint(r'tudo\\namora')\n\n# ou então podemos imprimir com a qubra de linha\nprint('tudo\\namora')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntudo\\namora\ntudo\namora\n```\n:::\n:::\n\n\nold string formating%\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# se x for string\nx = '15'\n\nprint(\"x como string = %s\" %(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx como string = 15\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ny = int(x)\nprint(\"x como integer = %d\" %(y))\n\nprint(\"x como float = %09.4f\" %(y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx como integer = 15\nx como float = 0015.0000\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ninput(\"Escreve um input: \")\n```\n:::\n\n\nfunção que avalia o seu argumento:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nnumero = eval('2')\n\n# em alternativa podemos especificar o tipo que pretendemos\nnumero = int('2')\n\nprint(f\"o dobro do numero é: {numero *2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\no dobro do numero é: 4\n```\n:::\n:::\n\n\nem alternativa podemos especificar o tipo que pretendemos\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ninteiro = int('2')\n\nprint(f\"o dobro do numero é: {inteiro *2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\no dobro do numero é: 4\n```\n:::\n:::\n\n\nNo modo script podemos criar um ficheiro com o código que queremos executar, por exemplo o ficheiro `mod1.py` e excecutar na linha de comandos (*Iniciar -> Anaconda prompt*):   \n\n`C:\\Users\\bruno.lima\\Documents\\Python\\python2024\\exercicios>python mod1.py`\n\n## Aritmética\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# quatro operações básicas\n\nprint(2+2, 5-2, 4*2, 10/5)\n\n# potencias\n4**3\n\n# calcula horas\nminutos = 70\nprint(f\"são {minutos//60} horas e {minutos-60} minutos\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4 3 8 2.0\nsão 1 horas e 10 minutos\n```\n:::\n:::\n\n\n## Definir e alterar variáveis\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# por convenção devemos usar nome do formato case_snake\ncores_do_arco_iris = ['red','green','yellow','blue','orange','indigo', 'violet']\n\nnumero_de_tons = len(cores_do_arco_iris)\n\nnumero_de_tons\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n7\n```\n:::\n:::\n\n\ncasting\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nx = int(3)\ny = str(3)\nz = float(3)\n```\n:::\n\n\n## Exercicios\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# calcular o vlume de um cilindro dado o raio da base e a altura\n\nraio_base = 2\naltura = 10\n\narea_base = 3.14*raio_base**2\n\nvolume = area_base*float(altura)\n\nprint(f\"o volume é: {volume} m3\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\no volume é: 125.60000000000001 m3\n```\n:::\n:::\n\n\nobtem os primeiros 4 divisores de um número N, separados por '++++'\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nN = 12\nlista = []\n\nfor i in range(1, N+1):\n  if N%i == 0:\n    lista.append(i)\n    \nprint(*lista[:4], sep = '+++')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1+++2+++3+++4\n```\n:::\n:::\n\n\nobtem os primeiros 4 múltiplos de um número, separados por '++++'\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nnumero=3\n\nprint(f'os múltiplos de {numero} são: {numero *1}', numero *2, numero *3, numero *4, sep = ' ++++ ', end = \" ^^\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nos múltiplos de 3 são: 3 ++++ 6 ++++ 9 ++++ 12 ^^\n```\n:::\n:::\n\n\n## Tipos de dados\n\n+ `str`\n\n+ numérico:\n\n    - int\n    - float\n    - complex\n+ `bool`\n\n+ sequencia:\n\n    -list\n    -tuple\n    -range\n+ `dict`\n\n+ set / frozenset\n\n+ binario:\n\n    - bytes\n    - bytearray\n    - memoryview\n\n### string\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\na = \"um conjunto de letras\"\n\ntipo=type(a)\nlen(a)\n\nprint(f\"o tipo da variável 'a' é {tipo}\")\n\nprint(f\"a primeira letra é %s e a ultima letra é %s\" % (a[0], a[-1]))\n\nprint(a[:2]) # todas as letras até à segunda posição\n```\n\n::: {.cell-output .cell-output-stdout}\n```\no tipo da variável 'a' é <class 'str'>\na primeira letra é u e a ultima letra é s\num\n```\n:::\n:::\n\n\n### `int`\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ni1 = 12\ni2 = -1\n\nprint(type(i1), type(i2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'> <class 'int'>\n```\n:::\n:::\n\n\n### `float`\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nf2=-7.7e100\nf3=2E2\n\nprint(f2, f3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-7.7e+100 200.0\n```\n:::\n:::\n\n\n::: {.callout-important}\nA instalação dos *packages* deve ser feita através do terminal Bash com o comando: `$ pip install pandas`\n:::\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nimport math\n\nprint(repr(math.pi))\nprint(format(math.pi,'.12g'))\nprint(format(math.pi,'.2f'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.141592653589793\n3.14159265359\n3.14\n```\n:::\n:::\n\n\narredondamento implicito\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nprint(.1+.1+.1 == .3)\n\nprint(round(.1+.1+.1, 10) == round(.3, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\n```\n:::\n:::\n\n\n### complex(j=parte imaginária)\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nc1 = 1j\nc2 = 3+5j\n\nprint(type(c1), type(c2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'complex'> <class 'complex'>\n```\n:::\n:::\n\n\n### `bool`\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nprint(type(True))\n\nprint(f\"o número zero é: {bool(0)}\")\nprint(f\"o número 45 é: {bool(45)}\")\nprint(f\"o nome 'INE' é: {bool('INE')}\")\nprint(f\"o vazio é: {bool('')}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'bool'>\no número zero é: False\no número 45 é: True\no nome 'INE' é: True\no vazio é: False\n```\n:::\n:::\n\n\n### sem tipo\n`NoneType`\n\n### conversão entre tipos\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# conversão implicita\nx = 10\ny = 5\nz = x+y\n\nprint(type(z))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n#conversão para inteiro\nprint(int(1))\nprint(int(2.8))\nprint(int(3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# conversão para float\nprint(float('3.1'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.1\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# conversão para bool\nprint(bool(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# conversão para string\na = str(2)\nb = str(3.0)\n\nprint(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 3.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n#conversão com eval\na = eval('8**2')\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n64\n```\n:::\n:::\n\n\n## Organização do código\n\n### Programação modular\n\n+ simplicidade\n+ facilidade de manutenção\n+ reutilização\n+ âmbito\n\n### Packages\n\n`packages`\n\n  + `subpackages`   \n    \n    - `module`: funções, classes, variáveis, código, ...\n    \n![](images/packages.jpg)\n\n### Funções\n\n+ Built-in (funções standard do Python)\n\n![](images/standard.jpg)\n\n+ UDF (funções definidas pelo utilizador)\n+ lambda (funções anónimas)\n      \n### UDF\n\n```\ndef nome_da_funcao(parametros):\n  \"\"\" comentário com propósito da função\"\"\"\n  \n  # corpo da função (instruções e lógica)\n  \n  return informacao_a_retornar\n```\n\nexemplos:\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndef soma(x,y):\n  \"\"\" AVISO \"\"\"\n  return(x+y)\n\nsoma(1,2)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n3\n```\n:::\n:::\n\n\n### exercícios\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# criar uma função que devolve um valor elevado a uma potencia\n\ndef pot(base, expo):\n  return(base**expo)\n\nprint(pot(5,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25\n```\n:::\n:::\n\n\n## Controlo da execução\n\n### Controlo condicional\n\n![](images/if_else.jpg)\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nchove = True\nif (chove):\n  print(\"chove mesmo!\")\nelse:\n  print(\"Faz sol!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nchove mesmo!\n```\n:::\n:::\n\n\noperadores de comparação\n```\n'>', '<', '==', '>=', '<=', '!=', 'is' ['not'], ['not'] 'in' \n```\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\na = 1\nb = 2\nc = 3\n\nprint(f\"1-{a} <{b} <{c}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1-1 <2 <3\n```\n:::\n:::\n\n\n### operador trenário\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nidade = int('20')\ndecisao = 'já pode votar' if idade >=18 else 'ainda não pode votar'\n\nprint(f\"com {idade} anos,  a decisão é: {decisao}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncom 20 anos,  a decisão é: já pode votar\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n# exemplo de menor legibilidade\nnr_mes = 3\n\nnome_mes = 'janeiro' if nr_mes == 1 else \\\n'fevereiro' if nr_mes == 2 else \\\n'março' if nr_mes == 3 else \\\n'outro'\n\nprint(nome_mes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmarço\n```\n:::\n:::\n\n\n### ciclos\n\n![](images/while.jpg)\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# definir função oráculo usado mais em baixo\ndef oraculo_mistico(pergunta):\n  ''' retorna uma resposta à pergunta feita\n  ao estilo do jogo \"Bola 8 mágica\"\n  '''\n  import random\n\n  respostas = [\n    \"Sim\", \"Não\", \"Claro\", \"Com certeza\", \"Arrisque\", \"Não conte com isso\", \"Provavelmente\",\n    \"É duvidoso\", \"Talvez\", \"Não tenho certeza\", \"Sem dúvida\", \"Absolutamente\",\n    \"É melhor não dizer agora\", \"Concentre-se e pergunte novamente\", \"Minhas fontes dizem não\",\n    \"As perspectivas não são boas\", \"Não é possível prever agora\", \"Reformule sua pergunta\",\n    \"Não posso responder a isso\", \"Pergunte novamente mais tarde\", \"Probabilidade zero\",\n    \"Está nas estrelas\", \"Muito provável\", \"Os astros são favoráveis\"\n  ]\n\n  return random.choice(respostas)\n```\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ncontinuar_jogo = True\n\nwhile(continuar_jogo):\n  pergunta = input(\"faz pergunta: \")\n  if(pergunta == 'sair'):\n    continuar_jogo = False\n  else:\n    reposta = oraculo_mistico(pergunta) # oraculo_mistico() é uma função ad hoc\n    print(f\"A resposta é: {resposta}\")\n```\n:::\n\n\n### for loop\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nfor i in range(10):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n:::\n:::\n\n\n### exercícios\n\nCom um for loop escreve os primeiros 10 multiplos de 7\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nfor i in range(10):\n  print(i * 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n7\n14\n21\n28\n35\n42\n49\n56\n63\n```\n:::\n:::\n\n\nCom recurso a loops,repita uma palavra definida pelo utilizador o número de vezes que ele pretenda, removendo a primeira letra da palavra introduzida\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\npalavra='teste'\nn=5\n\nprint(palavra[1:]*n, sep=' + ')\n\nfor i in range(n):\n  print(palavra[1:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nesteesteesteesteeste\neste\neste\neste\neste\neste\n```\n:::\n:::\n\n\nSimule o jogo de pedra, papel e tesoura com o computador (papel ganha pedra que ganha tesoura que ganha papel):\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nfrom random import sample\n\nlista = ['pedra','papel','tesoura']\n\njogador1 = sample(lista,1)[0]\njogador2 = sample(lista,1)[0]\n\nprint(jogador1, jogador2)\n\nganhador = 'empate' if jogador1 == jogador2 else \\\n'jogador1' if jogador1 == 'papel' and jogador2 == 'pedra' else \\\n'jogador1' if jogador1 == 'tesoura' and jogador2 == 'papel' else \\\n'jogador1' if jogador1 == 'pedra' and jogador2 == 'tesoura' else \\\n'jogador2'\n\nprint(f\"o vencedor é o {ganhador}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npedra papel\no vencedor é o jogador2\n```\n:::\n:::\n\n\nsolução alternativa:\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nimport random\nfim_do_jogo = False\n\nwhile (not(fim_do_jogo)):\n  jogada_humana = int(input(\"escolha:\\n1 - pedra\\n2 - papel\\n3 - tesoura\\n0 - terminar o jogo\\n\"))\n  if (jogada_humana == 0):\n    print(\"fim.\\n\")\n    fim_do_jogo = True\n  else:\n    jogada_cpu = random.choice([1, 2, 3]) # porque ainda não conhecemos o randint()\n\n    jogada_cpu_texto = \"pedra\"\n    if (jogada_cpu == 2):\n      jogada_cpu_texto = \"papel\"\n    elif (jogada_cpu == 3):\n      jogada_cpu_texto = \"tesoura\"\n\n    if (jogada_cpu == jogada_humana):\n      print(\"empate\\n\")\n    else:\n      print(f\"o computador jogou '{jogada_cpu_texto}'.\")\n      if ((jogada_cpu == 1 and jogada_humana == 2) or (jogada_cpu == 2 and jogada_humana == 3) or (jogada_cpu == 3 and jogada_humana == 1)):\n        print(\"vitória humana!\\n\\n\")\n      else:\n        print(\"o computador venceu\\n\\n\")\n```\n:::\n\n\n## Funções mais usadas\n\n### funções built-in\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nprint(\"a lista de nomes que podemos usar:\")\ndir()\nlen(dir())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na lista de nomes que podemos usar:\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n103\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nimport random\nimport math\n\nlen(dir())\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n106\n```\n:::\n:::\n\n\n`range()`\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nfor i in range(1, 5, 2):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n3\n```\n:::\n:::\n\n\n`ord()`\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nord('a')\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n97\n```\n:::\n:::\n\n\n`pow()`\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nprint(pow(4,2,5) == 4**2 %5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n`sum()`\n\n`len()`\n\n`max()`\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nvar1 = 'teste'\nvar2 = 'palavra'\nvar3 = 'coisa'\nmax_val = max(var1, var2, var3, key = len)\n\nprint(max_val)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npalavra\n```\n:::\n:::\n\n\n### ler a partir de ficheiros\n\n`ficheiro = open(r\"c:\\path\\ficheiros.txt\", modo_de_acesso)`\n\ntentativa de uniformizar:\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nimport os\n\npath = os.path.join(os.sep, rooth_path + os.sep = 'directoria')\n```\n:::\n\n\nler linha a linha:\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nlinhas = [line.strip().split('',1)] for line in open(nome_do_ficheiro)\n\nopen(nome_do_ficheiro).read()\n\nopen(nome_do_ficheiro).readlines()\n```\n:::\n\n\nescrever ficheiros\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\n# @title\nficheiro_escrita = g_path + 'texto_escrito.txt'\n\nwith open(ficheiro_escrita, 'w') as f:\n  f.write('Escrita a funcionar!')\n\nf.close()\n```\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\n# @title\nficheiro_escrita = g_path + 'texto_escrito2.txt'\n\nlinhas = [\n    \"aaa\",\n    \"bbb\",\n    \"ccc\"\n]\n\nficheiro = open(ficheiro_escrita, 'w')\nficheiro.writelines(linhas)\nficheiro.close() # to change file access modes\n```\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\n# @title\nficheiro_append = g_path + 'texto_append.txt'\n\nlinhas = [\n    \"uma linha\\n\",\n    \"duas linhas\\n\",\n    \"tantas linhas\\n\"\n]\n\nficheiro = open(ficheiro_append, 'a')\nficheiro.writelines(linhas)\nficheiro.close() # to change file access modes\n```\n:::\n\n\n### modulo `maths`\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nimport math\n\ndir(math)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n['__doc__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n 'acos',\n 'acosh',\n 'asin',\n 'asinh',\n 'atan',\n 'atan2',\n 'atanh',\n 'cbrt',\n 'ceil',\n 'comb',\n 'copysign',\n 'cos',\n 'cosh',\n 'degrees',\n 'dist',\n 'e',\n 'erf',\n 'erfc',\n 'exp',\n 'exp2',\n 'expm1',\n 'fabs',\n 'factorial',\n 'floor',\n 'fmod',\n 'frexp',\n 'fsum',\n 'gamma',\n 'gcd',\n 'hypot',\n 'inf',\n 'isclose',\n 'isfinite',\n 'isinf',\n 'isnan',\n 'isqrt',\n 'lcm',\n 'ldexp',\n 'lgamma',\n 'log',\n 'log10',\n 'log1p',\n 'log2',\n 'modf',\n 'nan',\n 'nextafter',\n 'perm',\n 'pi',\n 'pow',\n 'prod',\n 'radians',\n 'remainder',\n 'sin',\n 'sinh',\n 'sqrt',\n 'sumprod',\n 'tan',\n 'tanh',\n 'tau',\n 'trunc',\n 'ulp']\n```\n:::\n:::\n\n\n### modulo `statistics`\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\nimport statistics\n\ndir(statistics)\n\nsample = [10,203,54,69,221,57,84,29,46,77]\n\n# o valor NaN (Not a Number) afecta o comportamento de muitas destas funções,\n# ou seja, convém remover os NaN das listas antes de invocar estas funções\nres = statistics.mean(sample)\nprint(\"Média: \", res)\n# fmean -> mais rápido, converte todos os valores para float\n\nres = statistics.median(sample)\nprint(\"Mediana: \", res)\n#res = statistics.median_low(data)\n#res = statistics.median_high(data)\n\nres = statistics.stdev(sample)\nprint(\"Devsio padrão: \", res)\n# pstdev - toda a população\n\nres = statistics.mode(sample)\nprint(\"Moda: \", res)\n\nres = statistics.multimode(sample)\nprint(\"Modas (por ordem de aparecimento na lista): \", res)\n\nres = statistics.variance(sample)\nprint(\"Variância da amostra:\", res)\n# pvariance - toda a população\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMédia:  85\nMediana:  63.0\nDevsio padrão:  70.52816616233703\nModa:  10\nModas (por ordem de aparecimento na lista):  [10, 203, 54, 69, 221, 57, 84, 29, 46, 77]\nVariância da amostra: 4974.222222222223\n```\n:::\n:::\n\n\n### modulo `random`\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nimport random\ndir(random)\n\nprint(f\"Um valor aleatório entre 0 e 1: {random.random()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUm valor aleatório entre 0 e 1: 0.4114041311241732\n```\n:::\n:::\n\n\n## Introdução a listas\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\nlista = [5,7,9]\n\nsum(lista)\n#lista.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n21\n```\n:::\n:::\n\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\n# @title juntar listas\naves = [\"águia\", \"papagaio\", \"gaivota\"]\npeixes = [\"salmão\", \"tubarão\", \"carpa\"]\n\nanimais = aves + peixes\nprint(animais)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['águia', 'papagaio', 'gaivota', 'salmão', 'tubarão', 'carpa']\n```\n:::\n:::\n\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nmamiferos = ['cao','gato','elefante']\n\nfor i in range(len(mamiferos)):\n  print(i, mamiferos[i])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 cao\n1 gato\n2 elefante\n```\n:::\n:::\n\n\nacesso posicional\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nfor i in reversed(lista):\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n7\n5\n```\n:::\n:::\n\n\nalterer listas\n`append()`, `remove()`, `pop()`, \n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\nlista.append(11)\n\nlista.pop()\n\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n11\n```\n:::\n:::\n\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\ndel lista[2]\n\nprint(lista)\n\nprint(lista[1::2])\n\ninvertida = lista[::-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[5, 7]\n[7]\n```\n:::\n:::\n\n\nalterar listas\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\nlista = ['a','b',3,4]\n\nlista[2:] = 'r'\n\nprint(lista)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 'b', 'r']\n```\n:::\n:::\n\n\nsem repetições - `sample()`\n\ncom repetições - `choices()`\n\nbaralhar - `shuffle()`\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\nprint(' '.join(['pequena', 'pausa']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npequena pausa\n```\n:::\n:::\n\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\n# @title remove o elemento na posição e devolve esse elemento\nlista = [2, 5, 3, 7]\nprint(\"lista:\",lista)\n\np = 1\nremovido = lista.pop(p) #\n\nprint(f'\\n{p+1}º elemento da lista: {removido}')\nprint(f'lista após remoção do {p+1}º elemento: {lista}')\n\nultimo = lista.pop()\nprint(f'lista após remoção do último elemento: {lista}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlista: [2, 5, 3, 7]\n\n2º elemento da lista: 5\nlista após remoção do 2º elemento: [2, 3, 7]\nlista após remoção do último elemento: [2, 3]\n```\n:::\n:::\n\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\n# @title insere o elemento x na posição p da lista\nlista = [2, 3, 7]\nprint(\"lista:\",lista)\n\nx = 8\np = 2\nlista.insert(p, x)\n\nprint(f'\\napós inserção do {x} na {p+1}ª posição: {lista}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlista: [2, 3, 7]\n\napós inserção do 8 na 3ª posição: [2, 3, 8, 7]\n```\n:::\n:::\n\n\nsegmentar listas (slicing)\npossiblidades de segmentação\nlista[ indice_pos_inicial : indice_pos_final : incremento_do_indice ]\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\n# @title\nlista = [1, 2, 3, 4, 5, 6]\n\npares = lista[1::2]\n\nprint(lista, pares, sep=\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6]\n[2, 4, 6]\n```\n:::\n:::\n\n\nslicing - alterando a lista\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\n# @title\nlista = [\"a\", \"b\", 3, 4]\n\nlista[2:] = [\"r\"]\n\nprint(lista)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 'b', 'r']\n```\n:::\n:::\n\n\n### exercicios\n\nver ficheiro `mod1_ex_dia2_manha.py`\n\n## Strings e dicionários\n\nstring é uma sequencia de caracteres\n\n`str()`\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\nstring = 'teste'\n\ndir(string)\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getnewargs__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rmod__',\n '__rmul__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'capitalize',\n 'casefold',\n 'center',\n 'count',\n 'encode',\n 'endswith',\n 'expandtabs',\n 'find',\n 'format',\n 'format_map',\n 'index',\n 'isalnum',\n 'isalpha',\n 'isascii',\n 'isdecimal',\n 'isdigit',\n 'isidentifier',\n 'islower',\n 'isnumeric',\n 'isprintable',\n 'isspace',\n 'istitle',\n 'isupper',\n 'join',\n 'ljust',\n 'lower',\n 'lstrip',\n 'maketrans',\n 'partition',\n 'removeprefix',\n 'removesuffix',\n 'replace',\n 'rfind',\n 'rindex',\n 'rjust',\n 'rpartition',\n 'rsplit',\n 'rstrip',\n 'split',\n 'splitlines',\n 'startswith',\n 'strip',\n 'swapcase',\n 'title',\n 'translate',\n 'upper',\n 'zfill']\n```\n:::\n:::\n\n\nunir - `.join()`\n\n\n\no dicionário é um array associativo: conjunto de chave / valor\n\n`dict()`\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\npaises_iso = {\n  'Portugal': 'PT',\n  'Espanha': 'ES',\n  'Franca': 'FR',\n  'Alemanha': 'DE',\n  'Brasil': 'BR',\n  'Argentina': 'AR'\n}\n\npaises_iso['Italia'] = 'IT'\n\nprint(paises_iso)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Portugal': 'PT', 'Espanha': 'ES', 'Franca': 'FR', 'Alemanha': 'DE', 'Brasil': 'BR', 'Argentina': 'AR', 'Italia': 'IT'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\npaises_iso.get('Brasil')\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n'BR'\n```\n:::\n:::\n\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\n# for k, v in paises_iso:\n#   print(k,'{: }', sep = ': ')\n```\n:::\n\n\nexercicio\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\nusers = {\n  '': 'pass1',\n  '': 'pass2',\n  '': 'pass3',\n  '': 'pass4'\n}\n```\n:::\n\n\n## mais código\n\npodemos definir uma função com um input\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\ndef fib(n):\n  a, b = 0, 1\n  while a < n:\n    print(a, end=' ')\n    a, b = b, a+b\n  print()\n  \nfib(1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 \n```\n:::\n:::\n\n\ne criar uma lista que queremos transformar e enumerar\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\n# python 3: list comprehensions\nfruits = ['Banana', 'Apple', 'Lime']\nloud_fruits = [fruit.upper() for fruit in fruits]\n\nprint(loud_fruits)\n\nlist(enumerate(fruits))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['BANANA', 'APPLE', 'LIME']\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\n[(0, 'Banana'), (1, 'Apple'), (2, 'Lime')]\n```\n:::\n:::\n\n\ne tentar um `if` `else`\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\nfechado = True\n\nif fechado:\n  print('porta fechada!')\nelse:\n  print('vamos lá!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nporta fechada!\n```\n:::\n:::\n\n\nOperadores lógicos\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\nTrue and False\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\nTrue or False\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\nnot True == False\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\nTrue\n```\n:::\n:::\n\n\n## Packages\n\nFormas de importar\n\n`import <modulo>[, <nome_modulo>]`\n`from <modulo> import <name(s)> as <alt_name>`\n`import <modulo> as <alt_name>`\n\npackages disponíveis:\n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\n!pip freeze\n```\n:::\n\n\nexemplo de importação de package\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\nimport humanize\n\nhumanize.i18n.activate(\"pt_PT\")\n\nprint(humanize.apnumber(4))\n```\n:::\n\n\n::: {.cell execution_count=83}\n``` {.python .cell-code}\nimport random\n\nprint(random.random())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.6725263835327179\n```\n:::\n:::\n\n\n## [The Zen of Python](https://peps.python.org/pep-0020/)\n\n::: {.cell execution_count=84}\n``` {.python .cell-code}\nimport this\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```\n:::\n:::\n\n\n[Lessons from the Zen of Python](https://www.datacamp.com/blog/lessons-from-the-zen-of-python?utm_source=google&utm_medium=paid_search&utm_campaignid=19589720818&utm_adgroupid=152984010374&utm_device=c&utm_keyword=&utm_matchtype=&utm_network=g&utm_adpostion=&utm_creative=691747307221&utm_targetid=aud-517318241987:dsa-2222697811398&utm_loc_interest_ms=&utm_loc_physical_ms=1011781&utm_content=DSA~blog~Python&utm_campaign=230119_1-sea~dsa~tofu_2-b2c_3-eu_4-prc_5-na_6-na_7-le_8-pdsh-go_9-na_10-na_11-na-feb24&gad_source=1&gclid=CjwKCAjwh4-wBhB3EiwAeJsppGroHdOu1Op9NirjhJ1kjMgm5Oh95bf5VQpcOHRo3B6322TlLc0jUxoCKaQQAvD_BwE)\n\n<br>\n\n",
    "supporting": [
      "100-mod1_files"
    ],
    "filters": [],
    "includes": {}
  }
}