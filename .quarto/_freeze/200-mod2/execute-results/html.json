{
  "hash": "355b7b1adc17e47c2aeeff011d6fe432",
  "result": {
    "markdown": "# Data Science (Basics)\n\n::: {.callout-tip}\n## Conteúdos\n\nEstatísticas básicas em Python. \n\nApresentação dos *packages* `NumPy` e `Pandas`. \n\nFamiliarização com os aspectos fundamentais de bases de dados relacionais e o modelo relacional de gestão. \n\nConexões às bases de dados e interações através de consultas básicas de SQL.\n:::\n\n\n## Estatística Descritiva e Inferência\n\n$$D = \\{(\\vec{x}_1, y_1), ..., (\\vec{x}_n, y_n)\\} $$\n\n$(\\vec{x}, y) \\thicksim P$\n\ntipos de dados numericos: `int`, `float`\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Creating integer variables\nx = 10\ny = -5\nz = 0\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntype(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nint\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Creating float variables\na = 3.14\nb = -0.5\nc = 2.0\n\n# Using the variables\n(a + b) * c\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n5.28\n```\n:::\n:::\n\n\ntipo sequencia: `list`, `tuple`, `range`, `numpy.array`\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Creating a list of integers\nmy_list = [1, 2, 3, 4, 5]\n\n# Creating a list of strings\nnames = ['Alice', 'Bob', 'Charlie']\n\n# Creating a mixed-type list\nmixed_list = [1, 'hello', 3.14, True]\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Checking my_list\nmy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[1, 2, 3, 4, 5]\n```\n:::\n:::\n\n\nos elementos das listas são indexados\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Accessing elements in the list my_list\nmy_list = [1, 2, 3, 4, 5]\n\n# Accessing the first element (index 0)\nfirst_element = my_list[0]\nprint(first_element)  \n\n# Accessing the third element (index 2)\nthird_element = my_list[2]\nprint(third_element)  \n\n# Accessing the last element\nlast_element = my_list[-1]\nprint(last_element)  \n\n# Accessing the second-to-last element\nsecond_to_last_element = my_list[-2]\nprint(second_to_last_element)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n3\n5\n4\n```\n:::\n:::\n\n\nnum intervalo incluimos o primeiro index mas não o último\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Slicing to get a subset of elements\nsubset = my_list[1:4] \nprint(subset)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 3, 4]\n```\n:::\n:::\n\n\no operador `*` permite repetir a lista\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Using list repetition\nmy_list * 2\n\nmy_list + my_list\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n```\n:::\n:::\n\n\npara multiplicar cada elemento da lista:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Multiply every element of my_list by 2\nresult = [x * 2 for x in my_list]\nprint(result) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 4, 6, 8, 10]\n```\n:::\n:::\n\n\nA função `lambda` em Python é uma função anónima:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nmy_list = [1, 2, 3, 4, 5]\nresult = list(map(lambda x: x * 2, my_list))\nprint(result)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 4, 6, 8, 10]\n```\n:::\n:::\n\n\npara alterar a lista original temos de fazer um ciclo\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Update each element in the list by multiplying it by 2\nfor i in range(len(my_list)):\n    my_list[i] *= 2\n\nprint(my_list)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 4, 6, 8, 10]\n```\n:::\n:::\n\n\nordenação\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Sort my_list in descending order\nmy_list.sort(reverse=True)\n\nprint(my_list) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 8, 6, 4, 2]\n```\n:::\n:::\n\n\nconcatenar as listas usando o método extend\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmy_list = [1, 2, 3]\nanother_list = [4, 5, 6]\n\n# Concatenate another_list to my_list using the + operator\nmy_list += another_list\n\n# Concatenate another_list to my_list using the extend() method\nmy_list.extend(another_list)\n\nprint(my_list)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6, 4, 5, 6]\n```\n:::\n:::\n\n\nou com append\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Append each element from another_list to my_list using the append() method\nfor element in another_list:\n    my_list.append(element)\n\nprint(my_list)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6]\n```\n:::\n:::\n\n\neliminar elementos da lista por index\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nmy_list = [1, 2, 3, 4, 5]\n\n# Remove the element at index 2 (which is 3) from my_list\ndel my_list[2]\n\nprint(my_list)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 4, 5]\n```\n:::\n:::\n\n\nOs tuplos são normalmente usados em vez de listas quando pretendemos que sejam imutáveis, por exemplo coordenadas, configurações, chaves de um dicionário...\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Creating a tuple\nmy_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple) \n\ncoordinates = {(0, 0): 'origin', (1, 1): 'diagonal'}\ncoordinates\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 2, 3, 4, 5)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n{(0, 0): 'origin', (1, 1): 'diagonal'}\n```\n:::\n:::\n\n\nAs funções podem retornar múltiplos valores na forma de tuplo, permitindo um código conciso e eficiente. A descompactação de tuplos (tuple unpacking) é frequentemente usada para extrair os valores.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# Tuple unpacking\ndef get_coordinates():\n    return 10, 20\n\nx, y = get_coordinates()\nprint(\"x:\", x)\nprint(\"y:\", y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx: 10\ny: 20\n```\n:::\n:::\n\n\nranges\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Create a range of eggs\neggs = range(10)\neggs\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nrange(0, 10)\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# print all the elements in the range\nfor egg in eggs:\n    print(egg, end=\" \")\nprint()\n\ntype(eggs)\n\nlen(eggs)\n\nsum(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 1 2 3 4 5 6 7 8 9 \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n45\n```\n:::\n:::\n\n\ntipo texto (strings): `str`\n\ntipo booleano: `bool`\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndef is_even(number):\n    \"\"\"\n    Check if the given number is even.\n    \"\"\"\n    return number % 2 == 0\n\n# Test the function\nprint(is_even(4))  \nprint(is_even(7))  \n\nnum = 18\nif is_even(num):\n    print(f\"{num} is even.\")\nelse:\n    print(f\"{num} is odd.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n18 is even.\n```\n:::\n:::\n\n\ntipo categorico: `pandas.Categorical`\n\ndados temporais: `datetime`, `panda.Series`, `pandas.DataFrame`\n\ndistribuições estatisticas: `scipy.stats`\n\nArrays: `numpy.array`\n\n### Dados quantitativos\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nalturas = [1.65,1.73,1.78,1.67,1.82,1.76,1.75,1.74,1.75,1.67,1.67,1.69]\nlen(alturas)\ntype(alturas)\nalturas.sort(reverse=True)\nmedia_alturas = sum(alturas)/len(alturas)\nmedia_alturas\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n1.7233333333333334\n```\n:::\n:::\n\n\nrepresentação gráfica com um scatterplot\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\npesos = [92, 87, 102, 78, 87, 76, 69, 62, 63, 58, 61, 62]\n\n# importing the required module\nimport matplotlib.pyplot as plt\n  \n# x axis values\nx = alturas\n# corresponding y axis values\ny = pesos\n  \n# plotting points as a scatter plot\n# s - point size, alpha - opacity\nplt.scatter(x, y, color= \"green\", marker= \"*\", s=40)\n\n# naming the x axis\nplt.xlabel('Altura em m')\n# naming the y axis\nplt.ylabel('Peso em Kg')\n  \n# giving a title to my graph\nplt.title('Alturas e Pesos dos Formandos')\n  \n# function to show the plot\nplt.show()\n\n?plt.scatter\n```\n\n::: {.cell-output .cell-output-display}\n![](200-mod2_files/figure-html/cell-23-output-1.png){width=602 height=449}\n:::\n:::\n\n\n### Dados quantitativos\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nestado_civil = [\"solteiro\", \"casado\", \"solteiro\", \"divorciado\", \"solteiro\", \"solteiro\",\n               \"casado\", \"solteiro\", \"casado\", \"solteiro\", \"divorciado\", \"solteiro\"]\n              \nsolteiro_count = estado_civil.count(\"solteiro\")\n\ncasado_count = estado_civil.count(\"casado\")\n\ndivorciado_count = estado_civil.count(\"divorciado\")\ndivorciado_count\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n2\n```\n:::\n:::\n\n\nrepresentação gráfica (barras)\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# heights of bars\nheight = [solteiro_count, casado_count, divorciado_count]\n  \n# labels for bars\ntick_label = ['solteiro', 'casado', 'divorciado']\n  \n# plotting a bar chart\nplt.bar(tick_label, height, width = 0.8, color = 'blue')\n  \n# naming the x-axis\nplt.xlabel('Estado Civil')\n# naming the y-axis\nplt.ylabel('Nº de Indivíduos')\n# plot title\nplt.title('Frequências dos Estados Civis')\n  \n# function to show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](200-mod2_files/figure-html/cell-25-output-1.png){width=576 height=450}\n:::\n:::\n\n\nA partir de um dicionário\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nalturas_dict = { \"Teresa\": 165, \"Maria\": 169, \"Joao\": 178, \"Carlos\": 187,\n                \"Vasco\": 182, \"Joana\": 162, \"Sofia\": 165, \"Pedro\": 177,\n                \"Afonso\": 175, \"Miguel\": 177, \"Ana\": 163, \"Margarida\": 162}\n\n# converter para uma lista para depois fazerf o gráfico                \nalturas_list = list(alturas_dict.values())\nalturas_list\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n[165, 169, 178, 187, 182, 162, 165, 177, 175, 177, 163, 162]\n```\n:::\n:::\n\n\nagora um histograma\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nplt.hist(alturas_list, 4)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](200-mod2_files/figure-html/cell-27-output-1.png){width=558 height=411}\n:::\n:::\n\n\nestatisticas\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# Calcula a média usando a fórmula\nn = len(alturas_list)\nmed_alturas_list= sum(alturas_list)/n\n\nprint(\"Median: {0}\".format(med_alturas_list))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMedian: 171.83333333333334\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# Calcula a soma dos desvios quadrados\nss_alturas_list = sum((x - med_alturas_list)**2 for x in alturas_list)\nprint(ss_alturas_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n807.6666666666666\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# Variância amostral corrigida (da população) com ddof = 0\n# Variância amostral não corrigida com ddof = 1\nddof = 0\nvar_alturas_list = ss_alturas_list/(n-ddof)\nprint(var_alturas_list)\n\n# Desvio Padrão (corrigido - para alterar voltar ao passo anterior da variância)\ndp_alturas_list = var_alturas_list**0.5\nprint(dp_alturas_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n67.30555555555556\n8.203996316159312\n```\n:::\n:::\n\n\nusando uma pckage\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nimport statistics as st\n\nprint(\"The mean is:\", st.mean(alturas_list))\nprint(\"The mode is:\", st.mode(alturas_list))\nprint(\"The median is:\", st.median(alturas_list))\nprint(\"The sample variance is:\", st.variance(alturas_list))\nprint(\"The population variance is:\",st.pvariance(alturas_list))\nprint(\"The sample standard deviation is:\",st.stdev(alturas_list))\nprint(\"The population standard deviation is:\",st.pstdev(alturas_list))\n\nprint(\"The median is:\", st.median(alturas_list))\n# N = 4 devolve os 3 quartis superiores - percentis 25 e 75\nprint(\"The first three quartiles are:\", st.quantiles(alturas_list, n = 4))\n\nprint(\"The median is:\", st.median(alturas_list))\n# N = 10 devolve  - percentil 10, 20, ... , 90\nprint(\"The percentiles are:\", st.quantiles(alturas_list, n = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean is: 171.83333333333334\nThe mode is: 165\nThe median is: 172.0\nThe sample variance is: 73.42424242424242\nThe population variance is: 67.30555555555556\nThe sample standard deviation is: 8.568794689117158\nThe population standard deviation is: 8.203996316159312\nThe median is: 172.0\nThe first three quartiles are: [163.5, 172.0, 177.75]\nThe median is: 172.0\nThe percentiles are: [162.0, 162.6, 164.8, 165.8, 172.0, 176.6, 177.1, 179.6, 185.5]\n```\n:::\n:::\n\n\n### Numpy\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\no vector (*array*) é o objecto principal no NumPy\n\ncriar array a partir de lista\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nalturas_list\n\narray = np.array(alturas_list)\narray\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\narray([165, 169, 178, 187, 182, 162, 165, 177, 175, 177, 163, 162])\n```\n:::\n:::\n\n\nOs elementos dos array têm de ser todos do mesmo tipo.\n\narray 2D e 3D\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\narray_2D = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\narray_2D\n\nint_list = [[[1,2,4,4,5], [5,7,7,9,3], [3,2,5,3,6], [6,8,9,5,1]],\n             [[8,9,3,4,3], [4,6,4,3,3], [2,6,3,6,6], [8,5,7,2,1]],\n             [[1,2,7,9,5], [4,8,7,7,3], [8,5,7,6,7], [2,4,4,5,4]]]\narray_3D = np.array(int_list)\narray_3D\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\narray([[[1, 2, 4, 4, 5],\n        [5, 7, 7, 9, 3],\n        [3, 2, 5, 3, 6],\n        [6, 8, 9, 5, 1]],\n\n       [[8, 9, 3, 4, 3],\n        [4, 6, 4, 3, 3],\n        [2, 6, 3, 6, 6],\n        [8, 5, 7, 2, 1]],\n\n       [[1, 2, 7, 9, 5],\n        [4, 8, 7, 7, 3],\n        [8, 5, 7, 6, 7],\n        [2, 4, 4, 5, 4]]])\n```\n:::\n:::\n\n\nCriar um array a partir do zero\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n# Criar um array de inteiros de tamanho 10 (length-10) preenchido a zeros\nnp.zeros(10, dtype=int)\n\n# Criar um array de 3x5 (3 linhas e 5 colunas) com dados do tipo floating-point preenchido a 1s\nnp.ones((3, 5), dtype=float)\n# criar arrau 3D\nnp.ones((2, 4,6), dtype=float)\n\n# Criar um array de 3x5 (3 linhas e 5 colunas) com 3.14\nnp.full((3, 5), 3.14)\n\n# Criar um array de -3 a 4 com espaçamento igual entre os seus elementos\n# atenção que o valor inicial está incluido mas o de stop não\nnp.arange(-3,4)\n\n# Criar um array preenchido com uma sequência de 0 até 20 saltando de 2 em 2\n# quando se passa um terceiro argumento é interpretado como o espaçamento\nnp.arange(0, 20, 2)\n\n# Criar um array de 5 valores igualmente espaçados entre 0 e 1\nnp.linspace(0, 1, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\narray([0.  , 0.25, 0.5 , 0.75, 1.  ])\n```\n:::\n:::\n\n\nos array são iteráveis\n\ntodos os iteradores são iteráveis (o contrário não é válido)\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nclass SquaresIterator:\n    def __init__(self, n):\n        self.n = n\n        self.current = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current >= self.n:\n            raise StopIteration\n        result = self.current ** 2\n        self.current += 1\n        return result\n\n# Criar o iterador\niterator = SquaresIterator(5)\n\n# Usar o iterador para mostrar os valores\nwhile True:\n    try:\n        num = next(iterator)\n        print(num)\n    except StopIteration:\n        break\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n4\n9\n16\n```\n:::\n:::\n\n\nfunção gerador\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n# Definir o gerador\ndef squares(n):\n    current = 0\n    while current < n:\n        yield current ** 2\n        current += 1\n\n# Criar o iterador\nsquares_generator = squares(5)\n\n# Usar o iterador para imprimir os valores\nfor num in squares_generator:\n    print(num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n4\n9\n16\n```\n:::\n:::\n\n\nfazer um contador regressivo\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# Definir o gerador\ndef countdown(n):\n  while n >= 0:\n    yield n \n    n -= 1\n\n# Criar o iterador instanciado com o valor 3\ncountdown_generator = countdown(3)\n\n# Usar o iterador para imprimir os valores\nfor minutos in countdown_generator:\n    print(minutos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n2\n1\n0\n```\n:::\n:::\n\n\ncriar amostras pseudo/aleatorias>\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# Criar um array de 3x5 de valores aleatórios entre 0 e 1\n# a partir de uma distribuição uniforme contínua.\n# cada número gerado tem a mesma probabilidade de ocorrer dentro do intervalo\nnp.random.random((3, 5))\n\n# Criar um array de 3x3 de números aleatórios com uma distribuição normal\n# com média 0 e desvio padrão 1\nnp.random.normal(0, 1, (3, 3))\n\n# Criar um array de 3x3 de números aleatórios no intervalo de [0, 10[\n# notem que 0 pertece ao intervalo mas 10 não...\nnp.random.randint(0, 10, (3, 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\narray([[0, 6, 3],\n       [2, 3, 5],\n       [8, 8, 1]])\n```\n:::\n:::\n\n\ndefinir semente\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# Define a semente\nnp.random.seed(42)\n\n# Gera uma matriz 3x3 de números aleatórios duma distribuição normal\nnormal_array = np.random.normal(loc=0, scale=1, size=(3, 3))\n\nprint(normal_array)\n\n# Criar uma matriz identidade de 5x5\nnp.eye(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 0.49671415 -0.1382643   0.64768854]\n [ 1.52302986 -0.23415337 -0.23413696]\n [ 1.57921282  0.76743473 -0.46947439]]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\narray([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])\n```\n:::\n:::\n\n\nexercicios\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n# Proposta de Exercicio\n# Converta a lista de sudoku num array e mostre no écran o tipo da nova variável\n# sudoku_array para demonstrar que o código funcionou correctamente\nsudoku_list = [\n  [0, 0, 4, 3, 0, 0, 2, 0, 9], [0, 0, 5, 0, 0, 9, 0, 0, 1], [0, 7, 0, 0, 6, 0, 0, 4, 3],\n  [0, 0, 6, 0, 0, 2, 0, 8, 7], [1, 9, 0, 0, 0, 7, 4, 0, 0], [0, 5, 0, 0, 8, 3, 0, 0, 0],\n  [6, 0, 0, 0, 0, 0, 1, 0, 5], [0, 0, 3, 5, 0, 8, 6, 9, 0], [0, 4, 2, 9, 1, 0, 3, 0, 0]\n               ]\n               \nprint(type(sudoku_list))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'list'>\n```\n:::\n:::\n\n\npassar para array\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nsudoku_array = np.array(sudoku_list)\nprint(type(sudoku_array))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'numpy.ndarray'>\n```\n:::\n:::\n\n\nCriar um array de zeros com 4 colunas e 10 linhas \n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\n# Proposta de Exercicio\n# mostrar no écran o array para demonstrar que o código funcionou correctamente\nzero_array = np.zeros((10,4))\nzero_array\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\n# criação do doubling array que será mostrado no eixo do y\ndoubling_array = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n\n# criação do one_to_ten array que será mostrado no eixo do x\none_to_ten =np.arange(1,11)\n\n# código de display do plot que terá de ser adaptado\nplt.scatter(one_to_ten, doubling_array)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](200-mod2_files/figure-html/cell-44-output-1.png){width=575 height=411}\n:::\n:::\n\n\n### Atributos dos arrays NumPy\n\nobjecto do tipo gerador para numeros aleatorios\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nrng = np.random.default_rng(seed=2012) \ntype(rng)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\nnumpy.random._generator.Generator\n```\n:::\n:::\n\n\ncria array com valores até 3 com 6 elementos\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nx1 = rng.integers(3, size = 6)  \nx1\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\narray([2, 0, 1, 0, 0, 1], dtype=int64)\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nrng = np.random.default_rng(seed=2012)  # seed for reproducibility\n\nx2 = rng.integers(10, size=(3, 4))  # two-dimensional array\nprint('x2 tem {0} dimensões e uma shape {1} o seu conteúdo é '.format(x2.ndim, x2.shape))\nprint('{0}'.format(x2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx2 tem 2 dimensões e uma shape (3, 4) o seu conteúdo é \n[[8 2 4 0]\n [1 3 4 2]\n [4 8 7 7]]\n```\n:::\n:::\n\n\nmultidimensoes\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nrng = np.random.default_rng(seed=2012)  # seed for reproducibility\n\nx5 = rng.integers(10, size=(3, 4, 2, 5, 9))  # two-dimensional array\nprint('x5 tem {0} dimensões e uma shape {1} o seu conteúdo é '.format(x5.ndim, x5.shape))\n\n#print('{0}'.format(x5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx5 tem 5 dimensões e uma shape (3, 4, 2, 5, 9) o seu conteúdo é \n```\n:::\n:::\n\n\nmudar a shape dos arrays NumPy\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nx1=np.arange(1,6)\nprint(x1)\nprint(x1.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5]\n(5,)\n```\n:::\n:::\n\n\n`flatten()`, `reshape()`\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\narray = np.array([[1,2], [3,4], [5,6]])\n\nflat_array = array.flatten()\n\ndiff_array = flat_array.reshape(2,3)\n\nprint(array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2]\n [3 4]\n [5 6]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nprint(flat_array.shape, flat_array, flat_array.size)\n\nprint(diff_array.shape, diff_array, diff_array.size, diff_array.dtype, diff_array.ndim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(6,) [1 2 3 4 5 6] 6\n(2, 3) [[1 2 3]\n [4 5 6]] 6 int32 2\n```\n:::\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nnp.array([1.32, 5.78, 175.55]).dtype\n\nnp.array([\"Python\", \"para\", \"Estatísticas\",\"Oficiais\", \"otorrinolaringologista\"]).dtype\n\nboolean_array = np.array([[True, False], [False, False]], dtype=np.bool_)\nprint(boolean_array.dtype)\nboolean_array.astype(np.int32)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbool\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\narray([[1, 0],\n       [0, 0]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nnp.array([True, 42, 42.42, \"Hitchikers' Guide to the Galaxy\"]).dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\ndtype('<U32')\n```\n:::\n:::\n\n\nexercicios\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nsudoku_game = np.array([[0, 0, 4, 3, 0, 0, 2, 0, 9],\n       [0, 0, 5, 0, 0, 9, 0, 0, 1],\n       [0, 7, 0, 0, 6, 0, 0, 4, 3],\n       [0, 0, 6, 0, 0, 2, 0, 8, 7],\n       [1, 9, 0, 0, 0, 7, 4, 0, 0],\n       [0, 5, 0, 0, 8, 3, 0, 0, 0],\n       [6, 0, 0, 0, 0, 0, 1, 0, 5],\n       [0, 0, 3, 5, 0, 8, 6, 9, 0],\n       [0, 4, 2, 9, 1, 0, 3, 0, 0]])\n\nsudoku_solution = np.array([[8, 6, 4, 3, 7, 1, 2, 5, 9],\n       [3, 2, 5, 8, 4, 9, 7, 6, 1],\n       [9, 7, 1, 2, 6, 5, 8, 4, 3],\n       [4, 3, 6, 1, 9, 2, 5, 8, 7],\n       [1, 9, 8, 6, 5, 7, 4, 3, 2],\n       [2, 5, 7, 4, 8, 3, 9, 1, 6],\n       [6, 8, 9, 7, 3, 4, 1, 2, 5],\n       [7, 1, 3, 5, 2, 8, 6, 9, 4],\n       [5, 4, 2, 9, 1, 6, 3, 7, 8]])\n```\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\n# Usando os arrays já definidos sudoku_game e sudoku_solution \n# crie um array 3D com o jogo e a solução\ngame_and_solution = np.array([sudoku_game, sudoku_solution])\nprint(game_and_solution)\ngame_and_solution.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[[0 0 4 3 0 0 2 0 9]\n  [0 0 5 0 0 9 0 0 1]\n  [0 7 0 0 6 0 0 4 3]\n  [0 0 6 0 0 2 0 8 7]\n  [1 9 0 0 0 7 4 0 0]\n  [0 5 0 0 8 3 0 0 0]\n  [6 0 0 0 0 0 1 0 5]\n  [0 0 3 5 0 8 6 9 0]\n  [0 4 2 9 1 0 3 0 0]]\n\n [[8 6 4 3 7 1 2 5 9]\n  [3 2 5 8 4 9 7 6 1]\n  [9 7 1 2 6 5 8 4 3]\n  [4 3 6 1 9 2 5 8 7]\n  [1 9 8 6 5 7 4 3 2]\n  [2 5 7 4 8 3 9 1 6]\n  [6 8 9 7 3 4 1 2 5]\n  [7 1 3 5 2 8 6 9 4]\n  [5 4 2 9 1 6 3 7 8]]]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n(2, 9, 9)\n```\n:::\n:::\n\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nnew_sudoku_game = np.array([[0, 0, 4, 3, 0, 0, 2, 0, 9],\n       [0, 0, 5, 0, 0, 9, 0, 0, 1],\n       [0, 7, 0, 0, 6, 0, 0, 4, 3],\n       [0, 0, 6, 0, 0, 2, 0, 8, 7],\n       [1, 9, 0, 0, 0, 7, 4, 0, 0],\n       [0, 5, 0, 0, 8, 3, 0, 0, 0],\n       [6, 0, 0, 0, 0, 0, 1, 0, 5],\n       [0, 0, 3, 5, 0, 8, 6, 9, 0],\n       [0, 4, 2, 9, 1, 0, 3, 0, 0]])\n\nnew_sudoku_solution = np.array([[8, 6, 4, 3, 7, 1, 2, 5, 9],\n       [3, 2, 5, 8, 4, 9, 7, 6, 1],\n       [9, 7, 1, 2, 6, 5, 8, 4, 3],\n       [4, 3, 6, 1, 9, 2, 5, 8, 7],\n       [1, 9, 8, 6, 5, 7, 4, 3, 2],\n       [2, 5, 7, 4, 8, 3, 9, 1, 6],\n       [6, 8, 9, 7, 3, 4, 1, 2, 5],\n       [7, 1, 3, 5, 2, 8, 6, 9, 4],\n       [5, 4, 2, 9, 1, 6, 3, 7, 8]])\n```\n:::\n\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\n# Usando os novos já definidos new_sudoku_game e new_sudoku_solution\n# crie um novo array 3D com o novo jogo e a nova solução.\nnew_game_and_solution = np.array([new_sudoku_game, new_sudoku_solution])\n\n# Depois usando o arrays 3D do exercicio anterior e o agora criado \n# agrupe-os num novo array 4D\ngames_and_solutions = np.array([game_and_solution, new_game_and_solution])\n\n# Verifique a sua shape\ngames_and_solutions.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n(2, 2, 9, 9)\n```\n:::\n:::\n\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nprint(games_and_solutions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[[[0 0 4 3 0 0 2 0 9]\n   [0 0 5 0 0 9 0 0 1]\n   [0 7 0 0 6 0 0 4 3]\n   [0 0 6 0 0 2 0 8 7]\n   [1 9 0 0 0 7 4 0 0]\n   [0 5 0 0 8 3 0 0 0]\n   [6 0 0 0 0 0 1 0 5]\n   [0 0 3 5 0 8 6 9 0]\n   [0 4 2 9 1 0 3 0 0]]\n\n  [[8 6 4 3 7 1 2 5 9]\n   [3 2 5 8 4 9 7 6 1]\n   [9 7 1 2 6 5 8 4 3]\n   [4 3 6 1 9 2 5 8 7]\n   [1 9 8 6 5 7 4 3 2]\n   [2 5 7 4 8 3 9 1 6]\n   [6 8 9 7 3 4 1 2 5]\n   [7 1 3 5 2 8 6 9 4]\n   [5 4 2 9 1 6 3 7 8]]]\n\n\n [[[0 0 4 3 0 0 2 0 9]\n   [0 0 5 0 0 9 0 0 1]\n   [0 7 0 0 6 0 0 4 3]\n   [0 0 6 0 0 2 0 8 7]\n   [1 9 0 0 0 7 4 0 0]\n   [0 5 0 0 8 3 0 0 0]\n   [6 0 0 0 0 0 1 0 5]\n   [0 0 3 5 0 8 6 9 0]\n   [0 4 2 9 1 0 3 0 0]]\n\n  [[8 6 4 3 7 1 2 5 9]\n   [3 2 5 8 4 9 7 6 1]\n   [9 7 1 2 6 5 8 4 3]\n   [4 3 6 1 9 2 5 8 7]\n   [1 9 8 6 5 7 4 3 2]\n   [2 5 7 4 8 3 9 1 6]\n   [6 8 9 7 3 4 1 2 5]\n   [7 1 3 5 2 8 6 9 4]\n   [5 4 2 9 1 6 3 7 8]]]]\n```\n:::\n:::\n\n\n### Aceder aos elementos\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\nx1\n\n# Aceder ao primeiro elemento \n# (começa em zero)\nprint(\"O primeiro elemento é {0} e o segundo {1}\" .format(x1[0], x1[1]))\n\n# Aceder ao ante-penultimo elemento\nx1[-3]\n\n# Aceder ao 1º elemento da 2ª linha\n# (linha e coluna começam em zero)\nx2\nx2[2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nO primeiro elemento é 1 e o segundo 2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n7\n```\n:::\n:::\n\n\nslicing arrays\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nx1=np.arange(0,10)\n\nx1\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n:::\n:::\n\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nx1[:3]\n\nx1[3:]\n\nx1[1:6:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\narray([1, 3, 5])\n```\n:::\n:::\n\n\nmodificar células\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nx1[0] = 11\nx1\n\nx2[0,2] = 5\nx2\n\nx2[-1,0] = 6\nx2\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\narray([[8, 2, 5, 0],\n       [1, 3, 4, 2],\n       [6, 8, 7, 7]], dtype=int64)\n```\n:::\n:::\n\n\nSubarrays Multidimensionais\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\nprint(x2)\n# fatia das 2 primeiras linhas\n# as 3 primeiras colunas\nx2[:2, :3] \n\nx2[0:2, 0:2]\n\nx2[::-1, ::-1]\n\n# fatia a primeira coluna de x2\nx2[:, 0] \n\n# igual a x2[0, :]\nx2[0, 0:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[8 2 5 0]\n [1 3 4 2]\n [6 8 7 7]]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\narray([8, 2, 5, 0], dtype=int64)\n```\n:::\n:::\n\n\nCriar Cópias de Subarrays\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\n# x2_sub é uma view e não uma cópia!!!\nx2_sub = x2[:2, :2]\nprint(x2_sub)\n\nx2_sub[0, 0] = 99\nprint(x2_sub)\nprint(x2)\n\nx2_sub_copy = x2[:2, :2].copy()\nprint(x2_sub_copy)\n\nx2_sub_copy[0, 0] = 42\nprint(x2_sub_copy)\nprint(x2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[8 2]\n [1 3]]\n[[99  2]\n [ 1  3]]\n[[99  2  5  0]\n [ 1  3  4  2]\n [ 6  8  7  7]]\n[[99  2]\n [ 1  3]]\n[[42  2]\n [ 1  3]]\n[[99  2  5  0]\n [ 1  3  4  2]\n [ 6  8  7  7]]\n```\n:::\n:::\n\n\nReshape do Array\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\n# criar uma grid de 3 por 3\ngrid = np.arange(1, 10).reshape(3, 3)\nprint(grid)\n\ngrid.reshape((1, 9))\n\ngrid.reshape((9,1))\n\n# criar um vector em linha através do reshape\nx = np.array([1, 2, 3])\nx\n\n# criar um vector em linha através do newaxis\nx[np.newaxis, :] \n\n# criar um vector em coluna através do reshape\nx.reshape((3, 1))\n\n# criar um vector em coluna através do newaxis\nx[: ,np.newaxis] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\narray([[1],\n       [2],\n       [3]])\n```\n:::\n:::\n\n\nConcatenação de Arrays\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\nx = np.array([1, 2, 3])\ny = np.array([3, 2, 1])\nnp.concatenate([x, y])\n\n# concatenar mais do que 2 arrays de cada vez\nz = np.array([99, 99, 99])\nprint(np.concatenate([x, y, z]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 1  2  3  3  2  1 99 99 99]\n```\n:::\n:::\n\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\ngrid = np.array([[1, 2, 3],\n                 [4, 5, 6]])\n# concatenar ao longo do eixo 1\nnp.concatenate([grid, grid])\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\narray([[1, 2, 3],\n       [4, 5, 6],\n       [1, 2, 3],\n       [4, 5, 6]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\n# concatenar ao longo do 2º eixo\n# (indice dos eixos começa em zero)\nnp.concatenate([grid, grid], axis=1)\n\n# stack vertical de arrays\nnp.vstack([x, grid])\n\n# stack horizontal de arrays\ny = np.array([[99],\n              [99]])\nnp.hstack([grid, y])\n\nx_exp0 = np.expand_dims(x, axis=0)\nprint(x)\nprint(x_exp0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3]\n[[1 2 3]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\n# Definindo duas matrizes bidimensionais\nx = np.array([[1, 2],\n              [3, 4]])\n\ny = np.array([[5, 6],\n              [7, 8]])\n\n# Adicionando uma dimensão extra às matrizes\nx_expandido = np.expand_dims(x, axis=2)\ny_expandido = np.expand_dims(y, axis=2)\n\n# Concatenando as matrizes ao longo da terceira dimensão usando np.dstack()\nresultado = np.dstack((x_expandido, y_expandido))\n\nprint(x)\nprint(x_expandido)\nprint(resultado)\n\nx_exp1 = np.expand_dims(x, axis=1)\nx_exp1\n\nx_exp3 = np.expand_dims(x, axis=2)\nx_exp3\n\nx_exp2 = np.expand_dims(x, axis=2)\nx_exp2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2]\n [3 4]]\n[[[1]\n  [2]]\n\n [[3]\n  [4]]]\n[[[1 5]\n  [2 6]]\n\n [[3 7]\n  [4 8]]]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\narray([[[1],\n        [2]],\n\n       [[3],\n        [4]]])\n```\n:::\n:::\n\n\nSplit de Arrays\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\nx = [1, 2, 3, 99, 99, 3, 2, 1]\nx1, x2, x3 = np.split(x, [3, 5])\nprint(x1, x2, x3)\n\ngrid = np.arange(16).reshape((4, 4))\ngrid\n\nupper, lower = np.vsplit(grid, [2])\nprint(upper)\nprint(lower)\n\nleft, right = np.hsplit(grid, [2])\nprint(left)\nprint(right)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3] [99 99] [3 2 1]\n[[0 1 2 3]\n [4 5 6 7]]\n[[ 8  9 10 11]\n [12 13 14 15]]\n[[ 0  1]\n [ 4  5]\n [ 8  9]\n [12 13]]\n[[ 2  3]\n [ 6  7]\n [10 11]\n [14 15]]\n```\n:::\n:::\n\n\nAritmética de Arrays\n\nos operadores aritméticos são *universal functions* (Ufuncs)\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\nx = np.arange(4)\nprint(\"x      =\", x)\nprint(\"x + 5  =\", x + 5)\nprint(\"x - 5  =\", x - 5)\nprint(\"x * 2  =\", x * 2)\nprint(\"x / 2  =\", x / 2)\nprint(\"x // 2 =\", x // 2)  # divisão inteira\n\nprint(\"-x     = \", -x)     # - negação\nprint(\"x ** 2 = \", x ** 2) # ** quadrado\nprint(\"x ** 3 = \", x ** 3) # ** cubo\nprint(\"x % 2  = \", x % 2)  # % resto da divisão\n\nprint(\"e^x =\", np.exp(x))       # exponencial de base e\nprint(\"2^x =\", np.exp2(x))      # exponencial de base 2\nprint(\"3^x =\", np.power(3., x)) # exponencial de base 3\n\n# as operacções inversas das exponenciais, os logaritmos\n# também estão disponíveis\nx = [1, 2, 4, 10]\nprint(\"x        =\", x)\nprint(\"ln(x)    =\", np.log(x))\nprint(\"log2(x)  =\", np.log2(x))\nprint(\"log10(x) =\", np.log10(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx      = [0 1 2 3]\nx + 5  = [5 6 7 8]\nx - 5  = [-5 -4 -3 -2]\nx * 2  = [0 2 4 6]\nx / 2  = [0.  0.5 1.  1.5]\nx // 2 = [0 0 1 1]\n-x     =  [ 0 -1 -2 -3]\nx ** 2 =  [0 1 4 9]\nx ** 3 =  [ 0  1  8 27]\nx % 2  =  [0 1 0 1]\ne^x = [ 1.          2.71828183  7.3890561  20.08553692]\n2^x = [1. 2. 4. 8.]\n3^x = [ 1.  3.  9. 27.]\nx        = [1, 2, 4, 10]\nln(x)    = [0.         0.69314718 1.38629436 2.30258509]\nlog2(x)  = [0.         1.         2.         3.32192809]\nlog10(x) = [0.         0.30103    0.60205999 1.        ]\n```\n:::\n:::\n\n\nProdutos Externos\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\nx = np.arange(1, 6)\nx\n\nnp.multiply.outer(x, x)\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\narray([[ 1,  2,  3,  4,  5],\n       [ 2,  4,  6,  8, 10],\n       [ 3,  6,  9, 12, 15],\n       [ 4,  8, 12, 16, 20],\n       [ 5, 10, 15, 20, 25]])\n```\n:::\n:::\n\n\nAgregações\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\nx = np.arange(1, 6)\nx\n\nnp.add.reduce(x)\n\nnp.multiply.reduce(x)\n\nnp.add.accumulate(x)\n\nnp.multiply.accumulate(x)\n\nrng = np.random.default_rng()\nbig_array = rng.random(1000000)\n\n# %timeit sum(big_array)\n# %timeit np.sum(big_array)\n\nnp.min(big_array), np.max(big_array)\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\n(1.2519977897751389e-06, 0.999999823820084)\n```\n:::\n:::\n\n\nEstatísticas Básicas\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\n# Alturas dos primeiros ministros portugueses\nalturas = np.array([169, 170, 159, 173, 173, 171, 185, 168, 173, 183, 173, 173, 175, 178, 183, 182,\n                   178, 173, 174, 173, 176, 164, 170, 173, 182, 180, 183, 178, 182, 174, 175, 179,\n                   174, 173, 162, 173, 171, 165, 164, 168, 175, 165, 181, 172])\n                   \nprint(\"Média das Alturas:       \", np.mean(alturas))\nprint(\"Desvio Padrão:           \", np.std(alturas))\nprint(\"Altura Minima:    \", np.min(alturas))\nprint(\"Altura Máxima:    \", np.max(alturas))\n\nprint(\"Percentil 25:   \", np.percentile(alturas, 25))\nprint(\"Mediana:            \", np.median(alturas))\nprint(\"Percentil 75:   \", np.percentile(alturas, 75))\n\n#%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.hist(alturas,6)\nplt.title('Distribuição das Alturas dos Primeiro Ministros')\nplt.xlabel('Altura (cm)')\nplt.ylabel('Número');\n\nimport scipy.stats as st\n\n# criar um intervalo de confiança a 95% para a altura média da população\n# usando a distribuição normal\nst.norm.interval(confidence=0.95, loc=np.mean(alturas), scale=st.sem(alturas))\n\n#%pwd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMédia das Alturas:        173.75\nDesvio Padrão:            6.049511625667885\nAltura Minima:     159\nAltura Máxima:     185\nPercentil 25:    170.75\nMediana:             173.0\nPercentil 75:    178.0\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n(171.94185115248527, 175.55814884751473)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](200-mod2_files/figure-html/cell-74-output-3.png){width=597 height=450}\n:::\n:::\n\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\n# Linux\n# datadir = \"../../../../Datasets/Hospital/\"\n\n# Windows\n# datadir = \"..\\\\..\\\\..\\\\..\\\\Datasets\\\\Hospital\\\\\"\ndatadir =\"data\\\\\"\nfilename = \"D_Internamento_1.csv\"\n```\n:::\n\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\nimport pandas as pd \n\ndf_int = pd.read_csv(f\"{datadir}{filename}\", skiprows=2)\ndf_int.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Ano</th>\n      <th>NORDEM</th>\n      <th>D010001</th>\n      <th>D010002</th>\n      <th>D010003</th>\n      <th>D010004</th>\n      <th>D010005</th>\n      <th>D010006</th>\n      <th>D010007</th>\n      <th>D010008</th>\n      <th>...</th>\n      <th>D022097</th>\n      <th>D022098</th>\n      <th>D022101</th>\n      <th>D022102</th>\n      <th>D022103</th>\n      <th>D022104</th>\n      <th>D022105</th>\n      <th>D022106</th>\n      <th>D022107</th>\n      <th>D022108</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2012</td>\n      <td>130</td>\n      <td>5149.0</td>\n      <td>4471.0</td>\n      <td>533.0</td>\n      <td>18.0</td>\n      <td>2079.0</td>\n      <td>2079.0</td>\n      <td>127.0</td>\n      <td>72894.0</td>\n      <td>...</td>\n      <td>62</td>\n      <td>21104</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012</td>\n      <td>75</td>\n      <td>1086.0</td>\n      <td>963.0</td>\n      <td>85.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>38.0</td>\n      <td>14864.0</td>\n      <td>...</td>\n      <td>19</td>\n      <td>6454</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2012</td>\n      <td>128</td>\n      <td>231.0</td>\n      <td>205.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>16.0</td>\n      <td>6186.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2012</td>\n      <td>111</td>\n      <td>421.0</td>\n      <td>284.0</td>\n      <td>101.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>36.0</td>\n      <td>14813.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2012</td>\n      <td>14</td>\n      <td>3737.0</td>\n      <td>3257.0</td>\n      <td>4.0</td>\n      <td>272.0</td>\n      <td>3012.0</td>\n      <td>3012.0</td>\n      <td>204.0</td>\n      <td>74172.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 226 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\nprint(df_int.D010002.min())\nprint(df_int.D010002.max())\n\nprint(df_int.D010004.min())\nprint(df_int.D010004.max())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.0\n42051.0\n0.0\n311.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\ndef plot_hist(x, p=5):\n # Plot the distribution and mark the mean\n plt.hist(x, alpha=.5)\n plt.axvline(x.mean())\n # 95% confidence interval \n plt.axvline(np.percentile(x, p/2.), color='red', linewidth=3)\n plt.axvline(np.percentile(x, 100-p/2.), color='red', linewidth=3)\n \ndef plot_dists(a, b, nbins, a_label='com_p', b_label='sem_p', p=5):\n # Create a single sequence of bins to be shared across both\n # distribution plots for visualization consistency.\n combined = pd.concat([a, b])\n breaks = np.linspace(\n combined.min(), \n combined.max(), \n num=nbins+1)\n plt.subplot(2, 1, 1)\n plot_hist(a)\n plt.title(a_label)\n \n plt.subplot(2, 1, 2)\n plot_hist(b)\n plt.title(b_label)\n \n plt.tight_layout()\n \nplot_dists(df_int.D010002, df_int.D010004, 20, a_label='Com Parecer', b_label='Sem parecer')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](200-mod2_files/figure-html/cell-78-output-1.png){width=662 height=470}\n:::\n:::\n\n\n### Introdução às bases de dados e modelos\n\nestabelecer ligação a base de dados\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\n# importar package \nimport cx_Oracle # cx_Oracle to access Oracle database\n\n# criar conexão\n# host = c21oradev01.int.ine.pt\n# port = 1521\n# service =FORMACAO\ndsn_tns = cx_Oracle.makedsn('c21oradev01.int.ine.pt', '1521', \n                            service_name='FORMACAO') \n```\n:::\n\n\npedir `user` e `password`\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\n# importar package em vez do package todo\n# trazer só o método getpass\nfrom getpass import getpass # para ler a password sem a mostrar\n\nmy_user = \"BRUNO.LIMA\"\nmy_password = \"*******\"\n```\n:::\n\n\ncriar ligação\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\n# Criar a conexão com todos os elementos,\n# incluingo user e password\nconn = cx_Oracle.connect(user=my_user, password=my_password, dsn=dsn_tns) \n```\n:::\n\n\nabrir cursor\n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\n# Criar o cursor na conexão conn que criámos antes\nc = conn.cursor()\n```\n:::\n\n\nconstruir query sql\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\nmy_sql = \"\"\"\nSELECT ano, nordem, nuts2, dtcc_cod, ent_cod\nFROM BDIFRM.TD_HOSP_10\n\"\"\"\n```\n:::\n\n\nexecutar\n\n::: {.cell execution_count=83}\n``` {.python .cell-code}\nc.execute(my_sql)\n```\n:::\n\n\nguardar dados\n\n::: {.cell execution_count=84}\n``` {.python .cell-code}\n# guardar os dados numa estrutura Python Pandas\nimport pandas as pd\n\ndf = pd.DataFrame(c.fetchall())\n```\n:::\n\n\nfechar cursor\n\n::: {.cell execution_count=85}\n``` {.python .cell-code}\nc.close()\n```\n:::\n\n\nfechar conexão à base de dados\n\n::: {.cell execution_count=86}\n``` {.python .cell-code}\nconn.close()\n```\n:::\n\n\nexplorar os dados\n\n::: {.cell execution_count=87}\n``` {.python .cell-code}\ndf.head()\n\n# atribuir os nomes das colunas\nnomes_col = [\"ano\", \"nordem\", \"nuts2\", \"dtcc_cod\", \"ent_cod\"]\ndf.columns = nomes_col\n```\n:::\n\n\nguardar num ficheiro .csv\n\n::: {.cell execution_count=88}\n``` {.python .cell-code}\ndf.head()\n\ndf.to_csv('data/tsee_2023.csv', index=False)\n```\n:::\n\n\nexercicio\n\nvoltar a criar ligação\n\n::: {.cell execution_count=89}\n``` {.python .cell-code}\n# Criar a conexão com todos os elementos,\n# incluingo user e password\nconn = cx_Oracle.connect(user=my_user, password=my_password, dsn=dsn_tns) \n```\n:::\n\n\nvoltar a criar cursor\n\n::: {.cell execution_count=90}\n``` {.python .cell-code}\n# Criar o cursor na conexão conn que criámos antes\nc = conn.cursor()\n```\n:::\n\n\ncontar nº de registos\n\n::: {.cell execution_count=91}\n``` {.python .cell-code}\nmy_sql = \"\"\"\nselect count(1) from\nBDIFRM.TD_HOSP_10\n\"\"\"\n```\n:::\n\n\nexcecutar\n\n::: {.cell execution_count=92}\n``` {.python .cell-code}\nc.execute(my_sql)\n```\n:::\n\n\nler dados\n\n::: {.cell execution_count=93}\n``` {.python .cell-code}\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n:::\n\n\ncontar distritos:\n\n::: {.cell execution_count=94}\n``` {.python .cell-code}\nmy_sql= \"\"\"\nselect dtcc_cod, count(1) from BDIFRM.TD_HOSP_10\ngroup by dtcc_cod\n\"\"\"\n```\n:::\n\n\nexcecutar\n\n::: {.cell execution_count=95}\n``` {.python .cell-code}\nc.execute(my_sql)\n```\n:::\n\n\nler dados\n\n::: {.cell execution_count=96}\n``` {.python .cell-code}\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n:::\n\n\ndistritos com 6:\n\n::: {.cell execution_count=97}\n``` {.python .cell-code}\nmy_sql= \"\"\"\nselect * from BDIFRM.TD_HOSP_10\nwhere dtcc_cod like '%6%'\n\"\"\"\n```\n:::\n\n\nexcecutar\n\n::: {.cell execution_count=98}\n``` {.python .cell-code}\nc.execute(my_sql)\n```\n:::\n\n\nler dados\n\n::: {.cell execution_count=99}\n``` {.python .cell-code}\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n:::\n\n\nNUTS2 11 ou 17 de 2012:\n\n::: {.cell execution_count=100}\n``` {.python .cell-code}\nmy_sql= \"\"\"\nselect * from BDIFRM.TD_HOSP_10\nwhere nuts2 in ('11', '17') AND ano = '2012'\n\"\"\"\n```\n:::\n\n\nexcecutar\n\n::: {.cell execution_count=101}\n``` {.python .cell-code}\nc.execute(my_sql)\n```\n:::\n\n\nler dados\n\n::: {.cell execution_count=102}\n``` {.python .cell-code}\ndf = pd.DataFrame(c.fetchall())\n\ndf\n```\n:::\n\n\ncontar pessoal ao serviço em tabela de hospitais\n\n::: {.cell execution_count=103}\n``` {.python .cell-code}\n# query\nmy_sql= \"\"\"\nselect ano, sum(c10001), sum(c10002), sum(c10003)\nfrom BDIFRM.TD_RECHUM1_10\nwhere ano = '2012'\ngroup by ano\n\"\"\"\n# executa\nc.execute(my_sql)\n# faz fetch\ndf = pd.DataFrame(c.fetchall())\n# mostra resultado\ndf\n```\n:::\n\n\nexemplos com joins e grupos\n\n::: {.cell execution_count=104}\n``` {.python .cell-code}\nmy_sql = \"\"\"\nselect t.ano, t.nuts2, t.dtcc_cod, m.cc_dsg, \nsum(r.C21041) cardio_total, sum(r.C21042) cardio_homnes, sum(r.C21043) cardio_mulheres \nfrom BDIFRM.TD_HOSP_10 h\nleft join BDIFRM.TD_NUM_10 m \non h.dtcc_cod = m.dtcc_cod\nleft join BDIFRM.REC_HUM1_10 r\non h.nordem = r.nordem\n--using (dtcc_cod)\nwhere nuts2 like '%1'\ngroup by t.ano, t.nuts2, t.dtcc_cod, m.cc_dsg\n\"\"\"\n# executa\nc.execute(my_sql)\n# faz fetch\ndf = pd.DataFrame(c.fetchall())\n# mostra resultado\ndf\n```\n:::\n\n\nfechar cursor e conexção\n\n::: {.cell execution_count=105}\n``` {.python .cell-code}\nc.close()\n\nconn.close()\n```\n:::\n\n\n## Series e Dataframes\n\n### Series\n\n::: {.cell execution_count=106}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = pd.Series([0.25, 0.5, 0.75, 1.0])\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\n0    0.25\n1    0.50\n2    0.75\n3    1.00\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=107}\n``` {.python .cell-code}\ndata.values\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\narray([0.25, 0.5 , 0.75, 1.  ])\n```\n:::\n:::\n\n\n::: {.cell execution_count=108}\n``` {.python .cell-code}\ndata.index\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\nRangeIndex(start=0, stop=4, step=1)\n```\n:::\n:::\n\n\naceder aos elementos series\n\n::: {.cell execution_count=109}\n``` {.python .cell-code}\n# acesso ao 2º elemento\n# lembrar que começa em 0\ndata[1]\n# acesso a 2 elementos no meio da Series \n# tal como no Numpy o último não está contido\ndata[1:3]\n# acesso a todos os elementos a partir do 3º\ndata[2:]\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n2    0.75\n3    1.00\ndtype: float64\n```\n:::\n:::\n\n\nIndexes nas series\n\n::: {.cell execution_count=110}\n``` {.python .cell-code}\ndata = pd.Series([0.25, 0.5, 0.75, 1.0],\n                 index=['a', 'b', 'c', 'd'])\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\na    0.25\nb    0.50\nc    0.75\nd    1.00\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=111}\n``` {.python .cell-code}\npopulation_dict = {'Lisboa': 544325,'Sintra': 385989, 'Vila Nova de Gaia': 304233,\n                   'Porto': 231834, 'Cascais': 214239, 'Loures': 201349,\n                   'Braga': 193324, 'Almada': 177943}\npopulation = pd.Series(population_dict)\npopulation\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\nLisboa               544325\nSintra               385989\nVila Nova de Gaia    304233\nPorto                231834\nCascais              214239\nLoures               201349\nBraga                193324\nAlmada               177943\ndtype: int64\n```\n:::\n:::\n\n\ncom indexes explicitos o último elemento está contido no slice\n\n::: {.cell execution_count=112}\n``` {.python .cell-code}\nserie = pd.Series({2:'a', 1:'b', 3:'c'})\n\nserie[1:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\n1    b\n3    c\ndtype: object\n```\n:::\n:::\n\n\nconstruir series\n\n::: {.cell execution_count=113}\n``` {.python .cell-code}\npd.Series([2, 4, 6])\n\npd.Series(10, index=[10, 20, 30])\n\npd.Series({2:'a', 1:'b', 3:'c'})\n\npd.Series({'a':1.2, 'b':1.5, 'c':1.7})\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n```\na    1.2\nb    1.5\nc    1.7\ndtype: float64\n```\n:::\n:::\n\n\n### DataFrames\n\n::: {.cell execution_count=114}\n``` {.python .cell-code}\narea_dict = {'Lisboa': 100.1,'Sintra': 23.8, 'Vila Nova de Gaia': 56.3,\n                   'Porto': 41.4, 'Cascais': 97.1, 'Loures': 11.8,\n                   'Braga': 41, 'Almada': 14.7}\narea = pd.Series(area_dict)\narea\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\nLisboa               100.1\nSintra                23.8\nVila Nova de Gaia     56.3\nPorto                 41.4\nCascais               97.1\nLoures                11.8\nBraga                 41.0\nAlmada                14.7\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=115}\n``` {.python .cell-code}\npopulation\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\nLisboa               544325\nSintra               385989\nVila Nova de Gaia    304233\nPorto                231834\nCascais              214239\nLoures               201349\nBraga                193324\nAlmada               177943\ndtype: int64\n```\n:::\n:::\n\n\njuntar numa dataFrame\n\n::: {.cell execution_count=116}\n``` {.python .cell-code}\ncities = pd.DataFrame({'population': population,\n                       'area': area})\ncities\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>population</th>\n      <th>area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lisboa</th>\n      <td>544325</td>\n      <td>100.1</td>\n    </tr>\n    <tr>\n      <th>Sintra</th>\n      <td>385989</td>\n      <td>23.8</td>\n    </tr>\n    <tr>\n      <th>Vila Nova de Gaia</th>\n      <td>304233</td>\n      <td>56.3</td>\n    </tr>\n    <tr>\n      <th>Porto</th>\n      <td>231834</td>\n      <td>41.4</td>\n    </tr>\n    <tr>\n      <th>Cascais</th>\n      <td>214239</td>\n      <td>97.1</td>\n    </tr>\n    <tr>\n      <th>Loures</th>\n      <td>201349</td>\n      <td>11.8</td>\n    </tr>\n    <tr>\n      <th>Braga</th>\n      <td>193324</td>\n      <td>41.0</td>\n    </tr>\n    <tr>\n      <th>Almada</th>\n      <td>177943</td>\n      <td>14.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=117}\n``` {.python .cell-code}\n# atributo index \ncities.index\n\n# atributo columns \ncities.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```\nIndex(['population', 'area'], dtype='object')\n```\n:::\n:::\n\n\ncriar dataFrame a partir de uma serie\n\n::: {.cell execution_count=118}\n``` {.python .cell-code}\n# a partir de um único objecto Series\npd.DataFrame(population, columns=['population'])\n```\n\n::: {.cell-output .cell-output-display execution_count=90}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>population</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lisboa</th>\n      <td>544325</td>\n    </tr>\n    <tr>\n      <th>Sintra</th>\n      <td>385989</td>\n    </tr>\n    <tr>\n      <th>Vila Nova de Gaia</th>\n      <td>304233</td>\n    </tr>\n    <tr>\n      <th>Porto</th>\n      <td>231834</td>\n    </tr>\n    <tr>\n      <th>Cascais</th>\n      <td>214239</td>\n    </tr>\n    <tr>\n      <th>Loures</th>\n      <td>201349</td>\n    </tr>\n    <tr>\n      <th>Braga</th>\n      <td>193324</td>\n    </tr>\n    <tr>\n      <th>Almada</th>\n      <td>177943</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\ncom um array\n\n::: {.cell execution_count=119}\n``` {.python .cell-code}\n# a partir de um array Numpy 2D\npd.DataFrame(np.random.rand(3, 2),\n             columns=['col1', 'col2'],\n             index=['a', 'b', 'c'])\n```\n\n::: {.cell-output .cell-output-display execution_count=91}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col1</th>\n      <th>col2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>a</th>\n      <td>0.181825</td>\n      <td>0.183405</td>\n    </tr>\n    <tr>\n      <th>b</th>\n      <td>0.304242</td>\n      <td>0.524756</td>\n    </tr>\n    <tr>\n      <th>c</th>\n      <td>0.431945</td>\n      <td>0.291229</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\ncom um dicionario\n\n::: {.cell execution_count=120}\n``` {.python .cell-code}\n# a partir de uma lista de dicionarios\ndata = [{'simples': i, 'dobro': 2 * i, 'triplo': 3 * i}\n        for i in range(6)]\npd.DataFrame(data)\n```\n\n::: {.cell-output .cell-output-display execution_count=92}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>simples</th>\n      <th>dobro</th>\n      <th>triplo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>4</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>8</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>10</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=121}\n``` {.python .cell-code}\n# se algumas chaves do dicionário estiverem em falta\n# vão ser preenchidas com o valor NaN\npd.DataFrame([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}])\n```\n\n::: {.cell-output .cell-output-display execution_count=93}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=122}\n``` {.python .cell-code}\n# a partir de um dicionário\npd.DataFrame({'population': population,\n              'area': area})\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>population</th>\n      <th>area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lisboa</th>\n      <td>544325</td>\n      <td>100.1</td>\n    </tr>\n    <tr>\n      <th>Sintra</th>\n      <td>385989</td>\n      <td>23.8</td>\n    </tr>\n    <tr>\n      <th>Vila Nova de Gaia</th>\n      <td>304233</td>\n      <td>56.3</td>\n    </tr>\n    <tr>\n      <th>Porto</th>\n      <td>231834</td>\n      <td>41.4</td>\n    </tr>\n    <tr>\n      <th>Cascais</th>\n      <td>214239</td>\n      <td>97.1</td>\n    </tr>\n    <tr>\n      <th>Loures</th>\n      <td>201349</td>\n      <td>11.8</td>\n    </tr>\n    <tr>\n      <th>Braga</th>\n      <td>193324</td>\n      <td>41.0</td>\n    </tr>\n    <tr>\n      <th>Almada</th>\n      <td>177943</td>\n      <td>14.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Pandas index\n\nindex como array imutável\n\n::: {.cell execution_count=123}\n``` {.python .cell-code}\nind = pd.Index([2, 3, 5, 7, 11])\nind\n\n# funciona e acede-se como um array\nind[1]\n\n# podem-se obter slices\nind[::2]\n\n# tem muitos atributos iguais\nprint(ind.size, ind.shape, ind.ndim, ind.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 (5,) 1 int64\n```\n:::\n:::\n\n\npor ser imutável\n\n::: {.cell execution_count=124}\n``` {.python .cell-code}\n# mas é imutável, i.e. não pode ser alterado\n# pelos meios habituais, por isso isto não funciona\nind[1] = 0\n```\n:::\n\n\nO Index também pode ser visto como um set ordenado\n\n::: {.cell execution_count=125}\n``` {.python .cell-code}\nindA = pd.Index([1, 3, 5, 7, 9])\nindB = pd.Index([2, 3, 5, 7, 11])\n\n# interseção de conjuntos\nindA.intersection(indB)\n\n# união de conjuntos\nindA.union(indB)\n\n# diferença entre conjuntos\nindA.symmetric_difference(indB)\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\nIndex([1, 2, 9, 11], dtype='int64')\n```\n:::\n:::\n\n\n### Seleção de dados\n\n::: {.cell execution_count=126}\n``` {.python .cell-code}\ndata = pd.Series([0.25, 0.5, 0.75, 1.0],\n                 index=['a', 'b', 'c', 'd'])\ndata\n\ndata['b']\n\n# verifica se tem esta chave (key)\n'a' in data\n\n# acede a todas as chaves (keys)\ndata.keys()\n\n# acede aos pares\ndata.items()\n\n# acede a todos os valores (items)\nlist(data.items())\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```\n[('a', 0.25), ('b', 0.5), ('c', 0.75), ('d', 1.0)]\n```\n:::\n:::\n\n\n::: {.cell execution_count=127}\n``` {.python .cell-code}\n# expande a series acrescentando um elemento\ndata['e'] = 1.25\ndata\n\n# altera a série mapeando a key b para 0.48 em vez de 0.5\ndata['b'] = 0.48\ndata\n\n# slicing com index explicito\ndata['a':'c']\n\n# slicing com index implicito\ndata[0:2]\n\n# masking \ndata[(data > 0.3) & (data < 0.8)]\n\n# fancy indexing\ndata[['a', 'e']]\n```\n\n::: {.cell-output .cell-output-display execution_count=98}\n```\na    0.25\ne    1.25\ndtype: float64\n```\n:::\n:::\n\n\n### Indexers: loc (explícito) e iloc (implícito)\n\n::: {.cell execution_count=128}\n``` {.python .cell-code}\ndata = pd.Series(['a', 'b', 'c'], index=[1, 3, 5])\ndata\n\n# indice explicito \ndata.loc[1]\n\n# indice explicito \ndata.loc[1:3]\n\n# indice implicito\ndata.iloc[1]\n\n# indice implicito \ndata.iloc[1:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```\n3    b\n5    c\ndtype: object\n```\n:::\n:::\n\n\n### DataFrames\n\n::: {.cell execution_count=129}\n``` {.python .cell-code}\npop = pd.Series({'Lisboa': 544325,'Sintra': 385989, 'Vila Nova de Gaia': 304233,\n                   'Porto': 231834, 'Cascais': 214239, 'Loures': 201349,\n                   'Braga': 193324, 'Almada': 177943})\n\narea = pd.Series({'Lisboa': 100.1,'Sintra': 23.8, 'Vila Nova de Gaia': 56.3,\n                   'Porto': 41.4, 'Cascais': 97.1, 'Loures': 11.8,\n                   'Braga': 41, 'Almada': 14.7})\n\ndata = pd.DataFrame({'area':area, 'pop':pop})\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>area</th>\n      <th>pop</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lisboa</th>\n      <td>100.1</td>\n      <td>544325</td>\n    </tr>\n    <tr>\n      <th>Sintra</th>\n      <td>23.8</td>\n      <td>385989</td>\n    </tr>\n    <tr>\n      <th>Vila Nova de Gaia</th>\n      <td>56.3</td>\n      <td>304233</td>\n    </tr>\n    <tr>\n      <th>Porto</th>\n      <td>41.4</td>\n      <td>231834</td>\n    </tr>\n    <tr>\n      <th>Cascais</th>\n      <td>97.1</td>\n      <td>214239</td>\n    </tr>\n    <tr>\n      <th>Loures</th>\n      <td>11.8</td>\n      <td>201349</td>\n    </tr>\n    <tr>\n      <th>Braga</th>\n      <td>41.0</td>\n      <td>193324</td>\n    </tr>\n    <tr>\n      <th>Almada</th>\n      <td>14.7</td>\n      <td>177943</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\ntransformar os dados\n\n::: {.cell execution_count=130}\n``` {.python .cell-code}\n# criar coluna\ndata['dens'] = data['pop'] / data['area'] \ndata\n\n# ver os dados como num array 2D\ndata.values\n\n# transposicao para trocar linhas com colunas\ndata.T\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Lisboa</th>\n      <th>Sintra</th>\n      <th>Vila Nova de Gaia</th>\n      <th>Porto</th>\n      <th>Cascais</th>\n      <th>Loures</th>\n      <th>Braga</th>\n      <th>Almada</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>area</th>\n      <td>100.100000</td>\n      <td>23.80000</td>\n      <td>56.300000</td>\n      <td>41.400000</td>\n      <td>97.100000</td>\n      <td>11.800000</td>\n      <td>41.000000</td>\n      <td>14.700000</td>\n    </tr>\n    <tr>\n      <th>pop</th>\n      <td>544325.000000</td>\n      <td>385989.00000</td>\n      <td>304233.000000</td>\n      <td>231834.000000</td>\n      <td>214239.000000</td>\n      <td>201349.000000</td>\n      <td>193324.000000</td>\n      <td>177943.000000</td>\n    </tr>\n    <tr>\n      <th>dens</th>\n      <td>5437.812188</td>\n      <td>16218.02521</td>\n      <td>5403.783304</td>\n      <td>5599.855072</td>\n      <td>2206.374871</td>\n      <td>17063.474576</td>\n      <td>4715.219512</td>\n      <td>12104.965986</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\naceder aos dados\n\n::: {.cell execution_count=131}\n``` {.python .cell-code}\n# aceder a linha\ndata.values[0]\n\n# aceder a coluna \ndata['area']\n\n# aceder usando os indices implicitos inteiros\n# as primeiras 3 linhas, 0, 1 e 2\n# as primeiras 2 colunas 0 e 1\ndata.iloc[:3, :2]\n\n# aceder àos mesmos dados que anteriormente\n# agora usando os indices explicitos \ndata.loc[:'Vila Nova de Gaia', :'pop']\n\ndata.loc[data.dens > 10000, ['pop', 'dens']]\n\ndata.loc[data['dens'] > 10000, ['pop', 'dens']]\n\ndata.iloc[0, 2] = 5000\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>area</th>\n      <th>pop</th>\n      <th>dens</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lisboa</th>\n      <td>100.1</td>\n      <td>544325</td>\n      <td>5000.000000</td>\n    </tr>\n    <tr>\n      <th>Sintra</th>\n      <td>23.8</td>\n      <td>385989</td>\n      <td>16218.025210</td>\n    </tr>\n    <tr>\n      <th>Vila Nova de Gaia</th>\n      <td>56.3</td>\n      <td>304233</td>\n      <td>5403.783304</td>\n    </tr>\n    <tr>\n      <th>Porto</th>\n      <td>41.4</td>\n      <td>231834</td>\n      <td>5599.855072</td>\n    </tr>\n    <tr>\n      <th>Cascais</th>\n      <td>97.1</td>\n      <td>214239</td>\n      <td>2206.374871</td>\n    </tr>\n    <tr>\n      <th>Loures</th>\n      <td>11.8</td>\n      <td>201349</td>\n      <td>17063.474576</td>\n    </tr>\n    <tr>\n      <th>Braga</th>\n      <td>41.0</td>\n      <td>193324</td>\n      <td>4715.219512</td>\n    </tr>\n    <tr>\n      <th>Almada</th>\n      <td>14.7</td>\n      <td>177943</td>\n      <td>12104.965986</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Operações no Pandas\n\n`np.random.default_rng(42)` cria uma instância da classe gerador do módulo numpy.random module. Este gerador baseado no algoritmo PCG64 é um gerador de números pseudo-random que na realidade é determinado pelo valor inicial da seed, neste caso 42.\n\n::: {.cell execution_count=132}\n``` {.python .cell-code}\n# criação de Series com números aleatórios \n# entre 0 e 10 (exclusive) e 4 linhas\n# a seed está fixa a 42\nrng = np.random.default_rng(42)\nser = pd.Series(rng.integers(0, 10, 4))\nser\n\n# a função unária preserva os indices\nnp.exp(ser)\n\n# criação de dataFrame com números aleatórios entre\n# 0 e 10 (exclusive) e 3 linhas e 4 colunas\ndf = pd.DataFrame(rng.integers(0, 10, (3, 4)),\n                  columns=['A', 'B', 'C', 'D'])\ndf\n\n# a função unária preserva os indices\nnp.sin(df * np.pi / 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.224647e-16</td>\n      <td>-2.449294e-16</td>\n      <td>0.000000</td>\n      <td>-1.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>-0.707107</td>\n      <td>0.707107</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-7.071068e-01</td>\n      <td>-7.071068e-01</td>\n      <td>-0.707107</td>\n      <td>-0.707107</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNas operações binárias como a soma e a multiplicação o Pandas alinha os indices ao passar os objectos para as ufunc.\nNos items para os quais não há uma entrada é colocado o valor NaN, \"Not a Number\" que é como o Pandas marca valores em falta (missing data)\n\n::: {.cell execution_count=133}\n``` {.python .cell-code}\npop_u = pd.Series({'Lisboa': 544325,'Sintra': 385989, 'Vila Nova de Gaia': 304233}, name='pop')\n\narea_u = pd.Series({'Sintra': 23.8, 'Vila Nova de Gaia': 56.3, 'Porto': 41.4}, name='area')\n\npop_u / area_u\n\narea.index.union(pop.index)\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```\nIndex(['Lisboa', 'Sintra', 'Vila Nova de Gaia', 'Porto', 'Cascais', 'Loures',\n       'Braga', 'Almada'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=134}\n``` {.python .cell-code}\n# se os indices forem numéricos ficam ordenados\nA = pd.Series([2, 4, 6], index=[0, 1, 2])\nB = pd.Series([1, 3, 5], index=[1, 2, 3])\nA + B\n\n# existem várias hipóteses para lidar com missing values\n# adiciona as series mas sunstitui nan por zero\nA.add(B, fill_value=0)\n\nA = pd.DataFrame(rng.integers(0, 20, (2, 2)),\n                 columns=['a', 'b'])\nA\n\nB = pd.DataFrame(rng.integers(0, 10, (3, 3)),\n                 columns=['b', 'a', 'c'])\nB\n\n# exemplo de alinhamento de indices nas DataFrames\nA + B\n\nA.values.mean()\n\n# outra forma de lidar com missing values\nA.add(B, fill_value=A.values.mean())\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13.00</td>\n      <td>7.00</td>\n      <td>10.25</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>23.00</td>\n      <td>18.00</td>\n      <td>15.25</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>17.25</td>\n      <td>13.25</td>\n      <td>14.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Ufuncs**: Operações entre DataFrames e Series\n\n::: {.cell execution_count=135}\n``` {.python .cell-code}\nA = rng.integers(10, size=(3, 4))\nA\n\n# subtrai a todas as linhas a primeira\nA - A[0]\n\n# igual ao exemplo anterior mas usando indices explicitos\ndf = pd.DataFrame(A, columns=['Q', 'R', 'S', 'T'])\ndf - df.iloc[0]\n\n# Subtrair uma coluna em vez de uma linha\n# não esquecer de indicar axis = 0\ndf.subtract(df['R'], axis=0)\n\n# vai buscar a linha de indice 2 e as colunas (todas) com step 2\nprint(df.head())\nmeialinha = df.iloc[1, ::2]\nmeialinha\n\n# alinha os indices antes da operação\n# por isso só vai subtrair nas colunas Q e S\ndf - meialinha\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Q  R  S  T\n0  4  4  2  0\n1  5  8  0  8\n2  8  2  6  1\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=106}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q</th>\n      <th>R</th>\n      <th>S</th>\n      <th>T</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Missing values\n\nO tipo None do Python também pode ser usado para marcar missing values, mas não suporta operações aritméticas. Assim o uso do nan é mais vantajoso.\n\n::: {.cell execution_count=136}\n``` {.python .cell-code}\nvals1 = np.array([1, None, 2, 3])\nvals1\n```\n\n::: {.cell-output .cell-output-display execution_count=107}\n```\narray([1, None, 2, 3], dtype=object)\n```\n:::\n:::\n\n\nnão conseguimos sumar\n\n::: {.cell execution_count=137}\n``` {.python .cell-code}\nvals1.sum()\n```\n:::\n\n\ncom `nan` não dá erro\n\n::: {.cell execution_count=138}\n``` {.python .cell-code}\n# criação de um array com nan a marcar missing values\nvals2 = np.array([1, np.nan, 3, 4]) \nvals2\n\nprint(1 + np.nan)\nprint(0 * np.nan)\nprint(vals2.sum(), vals2.min(), vals2.max())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnan\nnan\nnan nan nan\n```\n:::\n:::\n\n\nO Pandas converte None em nan\n\n::: {.cell execution_count=139}\n``` {.python .cell-code}\npd.Series([1, np.nan, 2, None])\n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```\n0    1.0\n1    NaN\n2    2.0\n3    NaN\ndtype: float64\n```\n:::\n:::\n\n\nTodos os tipos começados por maiuscula como Int32 podem ser nullable e por isso receber NaN, None ou NA\n\n::: {.cell execution_count=140}\n``` {.python .cell-code}\npd.Series([1, np.nan, 2, None, pd.NA], dtype='Int32')\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```\n0       1\n1    <NA>\n2       2\n3    <NA>\n4    <NA>\ndtype: Int32\n```\n:::\n:::\n\n\n::: {.cell execution_count=141}\n``` {.python .cell-code}\ndata = pd.Series([1, np.nan, 'hello', None])\ndata\n\ndata.isnull()\n\ndata.isna()\n\ndata.notnull()\n\ndata[data.notnull()]\n\ndata.dropna()\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```\n0        1\n2    hello\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=142}\n``` {.python .cell-code}\ndf = pd.DataFrame([[1,      np.nan, 2],\n                   [2,      3,      5],\n                   [np.nan, 4,      6]])\ndf\n\n# remove registos com missing values\ndf.dropna()\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=143}\n``` {.python .cell-code}\ndf = pd.DataFrame([[1,      np.nan, 2],\n                   [2,      3,      5],\n                   [np.nan, 4,      6]])\ndf\n\n# remove colunas indicando axis = 1\n# também se pode indicar axis = columns' em vez de 1\ndf.dropna(axis = 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=144}\n``` {.python .cell-code}\ndf.loc[:,3] = np.nan\ndf\n\n# excluir aopenas quando todos são nulos\ndf.dropna(axis='columns', how='all')\n\ndf.fillna(0)\n# podemos fazer forward fill\ndf.ffill()\n# backward fill\ndf.bfill()\n# Ou amobos\ndf.bfill().ffill()\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>5</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>6</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nestas experiências não alteram mesmo a DataFrame se não usarmos o parâmetro inplace\n\n::: {.cell execution_count=145}\n``` {.python .cell-code}\ndf.dropna(axis='columns', how='all', inplace = True)\n\ndf.ffill(inplace = True)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=146}\n``` {.python .cell-code}\ndf.isna()\n\n# proposta testa por partes a expressão\n# estamos a examinar só a 2ª coluna\ndf.iloc[:,1].isna().sum()\n\ndf.iloc[:,1].fillna(df.iloc[:,1].mean())\n\ndf.head()\n\ndf.describe()\n\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   0       3 non-null      float64\n 1   1       2 non-null      float64\n 2   2       3 non-null      int64  \ndtypes: float64(2), int64(1)\nmemory usage: 204.0 bytes\n```\n:::\n:::\n\n\nquando estamos a examinar uma coluna tb pode ser útil saber quantos valores unicos tem\n\n::: {.cell execution_count=147}\n``` {.python .cell-code}\n# porque é que usamos o len\n# e não o .sum()\nlen(df.iloc[:,0].unique())\n\nsum(df.iloc[:,0].unique())\n\ndf.iloc[:,0].unique() \n\nvalor, contador = np.unique(df.iloc[:,2], return_counts = True)\nprint(valor)\nprint(contador)\n\nfor valor, contador in zip(valor, contador):\n    print(f\"{valor} aparece {contador} vezes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2 5 6]\n[1 1 1]\n2 aparece 1 vezes\n5 aparece 1 vezes\n6 aparece 1 vezes\n```\n:::\n:::\n\n\n::: {.cell execution_count=148}\n``` {.python .cell-code}\n# a função zip transforma 2 iteráveis num único iterável\n# em que cada elemento é um par\ncities = ['Elvas', 'Evora', 'Estremoz']\npop = [21750, 81127, 12750]\n \nnew_dict = {cities: pop for cities, pop in zip(cities, pop)}\nprint(new_dict)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Elvas': 21750, 'Evora': 81127, 'Estremoz': 12750}\n```\n:::\n:::\n\n\n### exemplos extra formação\n\n::: {.cell execution_count=149}\n``` {.python .cell-code}\nimport pandas as pd\nimport altair as alt\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n```\n:::\n\n\n::: {.cell execution_count=150}\n``` {.python .cell-code}\npenguins = pd.read_csv(\"https://pos.it/palmer-penguins-github-csv\")\n```\n:::\n\n\n::: {.cell execution_count=151}\n``` {.python .cell-code}\npenguins.groupby(\"species\").size().reset_index(name = \"count\")\n```\n\n::: {.cell-output .cell-output-display execution_count=121}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>152</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chinstrap</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gentoo</td>\n      <td>124</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=152}\n``` {.python .cell-code}\ncolors = [\"#FF8C00\", \"#A020F0\", \"#008B8B\"]\nsns.set_palette(colors, n_colors = 3)\n```\n:::\n\n\n::: {.cell execution_count=153}\n``` {.python .cell-code}\npenguins[\"bill_ratio\"] = (\n   penguins[\"bill_length_mm\"] / penguins[\"bill_depth_mm\"] \n)\nsns.displot(penguins, \n            x = \"bill_ratio\", \n            hue = \"species\", \n            kind = \"kde\", fill = True, aspect = 2, height = 3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](200-mod2_files/figure-html/cell-154-output-1.png){width=687 height=278}\n:::\n:::\n\n\n::: {.cell execution_count=154}\n``` {.python .cell-code}\ndef collatz(num):\n    if num % 2 == 0:\n        return num // 2\n    else:\n        return 3 * num + 1\n\nnumber = 5\n\nwhile number != 1:\n    number = collatz(int(number))\n    print(number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16\n8\n4\n2\n1\n```\n:::\n:::\n\n\n",
    "supporting": [
      "200-mod2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}